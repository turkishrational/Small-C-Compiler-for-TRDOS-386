use32
org 0x0
 db 'MENUET01'
 dd 0x01
 dd _main
 dd I_END
 dd 0x100000
 dd 0x7fff0
 dd 0x0,0x0
include 'INTRINS.ASM'

_get_even:
PUSH EBP
MOV EBP,ESP
  mov  eax,10
  int  0x40
POP EBP
RET

_get_key:
PUSH EBP
MOV EBP,ESP
  mov  eax,2
  int  0x40
  and  eax,0x0000ff00
  shr  eax,8
POP EBP
RET

_get_butt:
PUSH EBP
MOV EBP,ESP
  mov  eax,17
  int  0x40
  shr  eax,8
POP EBP
RET

_begin_dr:
PUSH EBP
MOV EBP,ESP
  mov  ebx,1
  mov  eax,12
  int  0x40
POP EBP
RET

_end_draw:
PUSH EBP
MOV EBP,ESP
  mov  ebx,2
  mov  eax,12
  int  0x40
POP EBP
RET

_window:
PUSH EBP
MOV EBP,ESP
  ; color of frames
  mov  edi,[esp+8]
  ; color of grab bar bit 8->color gl
  mov  esi,[esp+12]
  ; color of work area bit 8-> color gl
  mov  edx,[esp+16]
  ;left / width
  mov  ebx,[esp+32]
  shl  ebx,16
  mov  bx,[esp+24]
  ;top / height
  mov  ecx,[esp+28]
  shl  ecx,16
  mov  cx,[esp+20]
  ;execute
  mov  eax,0
  int  0x40
POP EBP
RET

_label:
PUSH EBP
MOV EBP,ESP
  mov  ebx,[esp+20]
  shl  ebx,16
  mov  bx,[esp+16]
  mov  ecx,[esp+12]
  mov  edx,[esp+8]
  ;find text lenght
  xor  esi,esi
.next:
  cmp  byte [edx+esi],0
  jz   .good
  inc  esi
  jmp  .next
.good:
  mov  eax,4
  int  0x40
POP EBP
RET

_buttonT:
PUSH EBP
MOV EBP,ESP
LEA EAX,[EBP+36]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+32]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+28]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+24]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+20]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+16]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,6
CALL _button
ADD ESP,24
LEA EAX,[EBP+36]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,4
ADD EAX,EBX
PUSH EAX
LEA EAX,[EBP+32]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,2
ADD EAX,EBX
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,4
CALL _label
ADD ESP,16
POP EBP
RET

_button:
PUSH EBP
MOV EBP,ESP
  ;left / width
  mov  ebx,[esp+28]
  shl  ebx,16
  mov  bx,[esp+20]
  ;top / height
  mov  ecx,[esp+24]
  shl  ecx,16
  mov  cx,[esp+16]
  mov  edx,[esp+8]
  mov  esi,[esp+12]
  mov  eax,8
  int  0x40
POP EBP
RET

_cbt DB 32,0

_chkbox:
PUSH EBP
MOV EBP,ESP
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,24
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,EAX
MOV EAX,1
CALL __eq
OR EAX,EAX
JNE _12
JMP _11
_12:
MOV EAX,_cbt
MOV EBX,EAX
MOV EAX,88
MOV [EBX],AL
JMP _13
_11:
MOV EAX,_cbt
MOV EBX,EAX
MOV EAX,32
MOV [EBX],AL
_13:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,8
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,12
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV EAX,12
PUSH EAX
MOV EAX,10
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,16
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV EAX,_cbt
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,20
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,8
CALL _buttonT
ADD ESP,32
POP EBP
RET

_eventCon:
PUSH EBP
MOV EBP,ESP
ADD ESP,-8
LEA EAX,[EBP-4]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
_17:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
CALL __lt
OR EAX,EAX
JNE _19
JMP _16
_19:
JMP _18
_15:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
INC EAX
MOV [EBX],EAX
DEC EAX
JMP _17
_18:
LEA EAX,[EBP-8]
PUSH EAX
LEA EAX,[EBP+16]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,EAX
MOV EAX,[EBX]
JMP _22
_23:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
CALL __eq
OR EAX,EAX
JNE _25
JMP _24
_25:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,24
ADD EAX,EBX
PUSH EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,24
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,1
XCHG EAX,EBX
SUB EAX,EBX
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP+16]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,2
CALL _renderCo
ADD ESP,8
MOV EAX,1
MOV ESP,EBP
POP EBP
RET
_24:
JMP _21
JMP _21
_22:
CALL __switch
 DD _23
 DD 1
 DD 0
_21:
JMP _15
_16:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET

_renderCo:
PUSH EBP
MOV EBP,ESP
ADD ESP,-8
LEA EAX,[EBP-4]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
_29:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
CALL __lt
OR EAX,EAX
JNE _31
JMP _28
_31:
JMP _30
_27:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
INC EAX
MOV [EBX],EAX
DEC EAX
JMP _29
_30:
LEA EAX,[EBP-8]
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,EAX
MOV EAX,[EBX]
JMP _34
_35:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,1
CALL _chkbox
ADD ESP,4
JMP _33
JMP _33
_34:
CALL __switch
 DD _35
 DD 1
 DD 0
_33:
JMP _27
_28:
MOV ESP,EBP
POP EBP
RET

_s_quit:
PUSH EBP
MOV EBP,ESP
  mov  eax,-1
  int  0x40
POP EBP
RET

_control: TIMES 2 DD 0

_cont1 DD 1,4,10,40,1118481,16777215,0

_cont2 DD 1,5,25,55,12303291,0,0

_main:
PUSH EBP
MOV EBP,ESP
ADD ESP,-8
MOV EAX,_control
PUSH EAX
MOV EAX,_cont1
POP EBX
MOV [EBX],EAX
MOV EAX,_control
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,_cont2
POP EBX
MOV [EBX],EAX
XOR CL,CL
CALL _draw_win
_38:
LEA EAX,[EBP-4]
PUSH EAX
XOR CL,CL
CALL _get_even
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
JMP _42
_43:
XOR CL,CL
CALL _draw_win
JMP _41
_44:
XOR CL,CL
CALL _get_butt
JMP _41
_45:
LEA EAX,[EBP-8]
PUSH EAX
XOR CL,CL
CALL _get_butt
POP EBX
MOV [EBX],EAX
MOV EAX,_control
PUSH EAX
MOV EAX,2
PUSH EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,3
CALL _eventCon
ADD ESP,12
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,EAX
MOV EAX,1
CALL __eq
OR EAX,EAX
JNE _47
JMP _46
_47:
XOR CL,CL
CALL _s_quit
_46:
JMP _41
JMP _41
_42:
CALL __switch
 DD _43
 DD 1
 DD _44
 DD 2
 DD _45
 DD 3
 DD 0
_41:
JMP _38
_39:
MOV ESP,EBP
POP EBP
RET

_text1 DB 84,72,73,83,32,73,83,32,65,78
 DB 32,69,88,65,77,80,76,69,32,79
 DB 70,32,67,0
 TIMES 26 DB 0

_text2 DB 80,82,79,71,82,65,77,32,73,78
 DB 32,75,79,76,73,66,82,73,79,83
 DB 0
 TIMES 29 DB 0

_text3 DB 0
 TIMES 49 DB 0

_text4 DB 83,85,67,67,69,83,83,0
 TIMES 42 DB 0

_p_text: TIMES 4 DD 0

_draw_win:
PUSH EBP
MOV EBP,ESP
ADD ESP,-8
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,25
MOV [EBX],EAX
MOV EAX,_p_text
PUSH EAX
MOV EAX,_text1
POP EBX
MOV [EBX],EAX
MOV EAX,_p_text
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,_text2
POP EBX
MOV [EBX],EAX
MOV EAX,_p_text
MOV EBX,8
ADD EAX,EBX
PUSH EAX
MOV EAX,_text3
POP EBX
MOV [EBX],EAX
MOV EAX,_p_text
MOV EBX,12
ADD EAX,EBX
PUSH EAX
MOV EAX,_text4
POP EBX
MOV [EBX],EAX
XOR CL,CL
CALL _begin_dr
MOV EAX,100
PUSH EAX
MOV EAX,100
PUSH EAX
MOV EAX,320
PUSH EAX
MOV EAX,150
PUSH EAX
MOV EAX,67108863
PUSH EAX
MOV EAX,-2142207792
PUSH EAX
MOV EAX,5275856
PUSH EAX
MOV CL,7
CALL _window
ADD ESP,28
MOV EAX,8
PUSH EAX
MOV EAX,8
PUSH EAX
MOV EAX,282980095
PUSH EAX
MOV EAX,_48+0
PUSH EAX
MOV CL,4
CALL _label
ADD ESP,16
MOV EAX,50
PUSH EAX
MOV EAX,35
PUSH EAX
MOV EAX,60
PUSH EAX
MOV EAX,12
PUSH EAX
MOV EAX,1118481
PUSH EAX
MOV EAX,1
PUSH EAX
MOV EAX,_48+20
PUSH EAX
MOV EAX,16777215
PUSH EAX
MOV CL,8
CALL _buttonT
ADD ESP,32
MOV EAX,_control
PUSH EAX
MOV EAX,2
PUSH EAX
MOV CL,2
CALL _renderCo
ADD ESP,8
LEA EAX,[EBP-4]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
_51:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,EAX
MOV EAX,4
CALL __lt
OR EAX,EAX
JNE _53
JMP _50
_53:
JMP _52
_49:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
INC EAX
MOV [EBX],EAX
DEC EAX
JMP _51
_52:
MOV EAX,20
PUSH EAX
LEA EAX,[EBP-8]
PUSH EAX
MOV EBX,EAX
MOV EAX,[EBX]
MOV EBX,10
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
MOV EBX,40
ADD EAX,EBX
PUSH EAX
XOR EAX,EAX
PUSH EAX
MOV EAX,_p_text
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,[EBX]
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX,[EBX]
PUSH EAX
MOV CL,4
CALL _label
ADD ESP,16
JMP _49
_50:
XOR CL,CL
CALL _end_draw
MOV ESP,EBP
POP EBP
RET
_48 DB 69,120,97,109,112,108,101,32,97,112
 DB 112,108,105,99,97,116,105,111,110,0
 DB 67,108,105,99,107,32,77,101,33,0
I_END:
