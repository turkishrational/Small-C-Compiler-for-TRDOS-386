; -----------------------------------------------------------
; Small C Compiler for TRDOS 386 (v2.0.9 and later)
; Erdogan Tan - 2024
; Beginning: 05/09/2024
; Last Update: 29/09/2024
; -----------------------------------------------------------
; Derived from 'cc4.asm' file of KolibriOS SCC source code
; 2024

_seq00 DD 0,1,51,0,257,75,0
_seq01 DD 0,74,0,2046,0,1792,65,1280,0,1795
 DD 68,0,0
_seq02 DD 0,76,0,2046,0,1792,101,1280,0,1795
 DD 102,0,0
_seq03 DD 0,65,62,68,0,258,1537,81,0,105
 DD 0
_seq04 DD 0,65,64,68,0,258,1537,82,0,106
 DD 0
_seq05 DD 0,65,61,68,0,257,103,257,80,511
 DD 0
_seq06 DD 0,65,63,68,0,257,103,257,80,511
 DD 0
_seq07 DD 0,30,33,1,51,28,0,260,1021,511
 DD 89,1021,0
_seq08 DD 0,30,33,1,51,29,0,260,1021,511
 DD 89,1021,0
_seq09 DD 0,30,33,1,51,32,0,260,1021,511
 DD 89,1021,0
_seq10 DD 0,30,89,70,0,258,30,1023,511,1023
 DD 0
_seq11 DD 0,30,51,0,257,89,1023,0
_seq12 DD 0,30,60,253,0,257,97,1023,0
_seq13 DD 0,31,61,253,0,100,257,80,511,2049
 DD 0
_seq14 DD 0,31,63,253,0,100,257,80,511,2049
 DD 0
_seq15 DD 0,32,60,253,0,257,98,1023,0
_seq16 DD 0,88,33,1,51,0,259,76,1022,511
 DD 91,1022,0
_seq17 DD 0,88,91,70,0,258,88,1023,511,91
 DD 1023,0
_seq18 DD 0,88,51,0,257,91,1023,0
_seq19 DD 0,89,31,70,69,0,259,104,1022,511
 DD 30,1022,0
_seq20 DD 0,33,1,0,257,74,1023,0
_seq21 DD 0,91,31,70,69,0,259,104,1022,511
 DD 88,1022,0
_seq22 DD 0,68,61,65,0,257,79,257,80,511
 DD 0
_seq23 DD 0,68,63,65,0,257,79,257,80,511
 DD 0
_seq24 DD 0,68,62,65,0,258,1537,92,0,77
 DD 0
_seq25 DD 0,68,64,65,0,258,1537,93,0,78
 DD 0
_seq26 DD 0,51,31,70,69,0,259,104,1022,0
_seq27 DD 0,51,31,251,0,257,33,0
_seq28 DD 0,25,33,1,51,0,259,94,1022,511
 DD 84,1022,0
_seq29 DD 0,25,51,253,0,257,83,1023,0
_seq30 DD 0,25,60,253,254,0,2387,258,0
_seq31 DD 0,58,33,1,51,0,1025,259,95,1021
 DD 0
_seq32 DD 0,58,60,51,0,257,95,1023,257,96
 DD 511,0
_seq33 DD 0,58,60,253,254,0,2399,258,0
_seq34 DD 0,58,51,0,257,95,1023,0
_seq35 DD 0,83,28,252,0,257,26,1023,0
_seq36 DD 0,83,29,252,0,257,27,1023,0
_seq37 DD 0,83,32,252,0,257,30,1023,0
_seq38 DD 0,84,94,32,252,0,258,767,1023,511
 DD 87,1023,0
_seq39 DD 0,95,28,252,0,1025,257,85,1023,0
_seq40 DD 0,95,29,252,0,1025,257,86,1023,0
_seq41 DD 0,95,32,60,253,0,1025,258,99,1022
 DD 0
_seq42 DD 0,95,32,252,0,1025,257,88,1023,0
_seq43 DD 0,60,255,59,0,258,767,1023,511,51
 DD 0
_seq44 DD 0,97,254,0,2393,257,0
_seq45 DD 0,98,255,59,0,258,767,1023,511,90
 DD 1023,0
_seq46 DD 0,99,254,0,2395,257,0
_seq47 DD 0,104,0,2046,0,1792,68,1280,0,1795
 DD 65,0,0
_seq: TIMES 48 DD 0
   
_setseq:
PUSH EBP
MOV EBP,ESP
MOV EAX,_seq
PUSH EAX
MOV EAX,_seq00
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq01
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,8
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq02
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,12
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq03
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,16
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq04
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,20
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq05
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,24
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq06
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,28
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq07
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,32
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq08
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,36
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq09
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,40
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq10
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,44
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq11
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,48
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq12
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,52
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq13
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,56
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq14
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,60
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq15
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,64
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq16
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,68
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq17
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,72
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq18
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,76
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq19
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,80
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq20
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,84
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq21
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,88
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq22
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,92
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq23
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,96
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq24
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,100
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq25
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,104
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq26
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,108
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq27
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,112
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq28
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,116
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq29
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,120
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq30
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,124
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq31
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,128
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq32
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,132
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq33
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,136
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq34
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,140
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq35
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,144
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq36
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,148
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq37
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,152
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq38
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,156
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq39
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,160
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq40
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,164
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq41
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,168
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq42
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,172
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq43
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,176
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq44
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,180
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq45
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,184
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq46
POP EBX
MOV [EBX],EAX
MOV EAX,_seq
MOV EBX,188
ADD EAX,EBX
PUSH EAX
MOV EAX,_seq47
POP EBX
MOV [EBX],EAX
POP EBP
RET
_code: TIMES 116 DD 0
   
_setcodes:
PUSH EBP	; setcodes() {
MOV  EBP,ESP
XOR  CL,CL
CALL _setseq	; setseq();
MOV  EAX,_code	; code[ADD12] = "\211ADD EAX,EBX\15\n"; 
MOV  EBX,4	; 1*4 (ADD12)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+0
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,296	; 74*4 (ADD1n)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+15
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,300
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+33
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,304
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+48
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,308
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+66
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,312
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+88
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,316	; 79*4 (ADDm_)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+110
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,8
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+119
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,12
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+137
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,16
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+152
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,20
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+163
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,24
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+189
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,28
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+229
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,32
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+269
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,36
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+281
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,40
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+293
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,44
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+299
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,48
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+312
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,52
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+331
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,320
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+342
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,56
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+350
POP  EBX
MOV [EBX],EAX
MOV  EAX,_code
MOV  EBX,60
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+363
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,324
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+376
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,328
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+394
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,64
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+412
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,68
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+429
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,444
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+453
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,448
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+459
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,452
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+470
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code	; code[ENTER] = "\100PUSH EBP\15\nMOV EBP,ESP\15\n";	
MOV  EBX,72	; 18*4 (ENTER)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+489
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,76
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+514
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,80
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+557
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,84
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+570
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,88
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+614
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,92
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+627
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,104
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+641
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,108
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+665
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,112
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+689
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,116
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+719
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,340
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+749
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,344
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+776
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,428
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+803
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,432
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+820
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,436
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+849
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,440
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+873
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,120
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+902
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,348
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+926
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,124
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+948
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,128
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+978
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,352
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1009
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,356
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1037
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,132
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1059
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,360
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1088
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,364
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1118
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,136
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1145
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,140
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1188
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,144
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1201
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,368
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1215
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,372
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1233
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,148
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1251
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,152
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1257
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,156
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1270
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,160
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1289
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,164
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1301
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,168
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1310
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code	; code[LE12] = "\011CALL __le\15\n";	
MOV  EBX,172	; 43*4 (LE12)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1354
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,176
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1367
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,180
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1381
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,184
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1396
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,188
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1439
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,192
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1452
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,196
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1466
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,200
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1496
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,204
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1533
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,208
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1548
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,212
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1560
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,216
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1571
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,220
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1615
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,224
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1628
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,228
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1640
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,376
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1654
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,96
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1665
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,100
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1685
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,232
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1700
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,332
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1720
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,336
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1735
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,380
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1748
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,236
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1768
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,240
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1779
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,384
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1791
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,388
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1803
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,392
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1815
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,396
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1835
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,400
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1855
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,244
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1864
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,248
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1885
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code	; code[PUTdm1] = "\010MOV DWORD [<m>],EAX\15\n";
MOV  EBX,456	; 114*4 (PUTdm1)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1901
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,460
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1924
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,252
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1941
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,256
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1962
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,260
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1978
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,404
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+1991
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,264
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2004
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code	; code[RETURN] = "\000?MOV ESP,EBP\15\n??POP EBP\15\nRET\15\n";
MOV  EBX,268	; 67*4 (RETURN)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2010
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,272
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2042
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,408
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2055
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,412
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2068
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,276
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2077
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,416
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2092
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,420
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2110
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,424
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2127
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,280
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2144
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code
MOV  EBX,284
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2160
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code	; code[SWITCH] = "\012CALL __switch\15\n";
MOV  EBX,288	; 72*4 (SWITCH)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2195
POP  EBX
MOV  [EBX],EAX
MOV  EAX,_code	; code[XOR12] = "\211XOR EAX,EBX\15\n";
MOV  EBX,292	; 73*4 (XOR12)
ADD  EAX,EBX
PUSH EAX
MOV  EAX,_4_2+2212
POP  EBX
MOV  [EBX],EAX
POP  EBP
RETN

_4_2 DB -119,65,68,68,32,69,65,88,44,69
 DB 66,88,13,10,0,8,63,65,68,68
 DB 32,69,65,88,44,60,110,62,13,10
 DB 63,63,0,-119,65,68,68,32,69,66
 DB 88,44,69,65,88,13,10,0,8,63
 DB 65,68,68,32,69,66,88,44,60,110
 DB 62,13,10,63,63,0,1,65,68,68
 DB 32,66,89,84,69,32,91,69,66,88
 DB 93,44,60,110,62,13,10,0,1,65
 DB 68,68,32,87,79,82,68,32,91,69
 DB 66,88,93,44,60,110,62,13,10,0
 DB 0,65,68,68,32,60,109,62,0,0
 DB 63,65,68,68,32,69,83,80,44,60
 DB 110,62,13,10,63,63,0,-119,65,78
 DB 68,32,69,65,88,44,69,66,88,13
 DB 10,0,8,78,69,71,32,69,65,88
 DB 13,10,0,0,63,77,79,86,32,67
 DB 76,44,60,110,62,63,88,79,82,32
 DB 67,76,44,67,76,63,13,10,0,9
 DB 77,79,86,32,69,67,88,44,69,65
 DB 88,13,10,77,79,86,32,69,65,88
 DB 44,69,66,88,13,10,83,65,76,32
 DB 69,65,88,44,67,76,13,10,0,9
 DB 77,79,86,32,69,67,88,44,69,65
 DB 88,13,10,77,79,86,32,69,65,88
 DB 44,69,66,88,13,10,83,65,82,32
 DB 69,65,88,44,67,76,13,10,0,8
 DB 67,65,76,76,32,69,65,88,13,10
 DB 0,16,67,65,76,76,32,60,109,62
 DB 13,10,0,0,32,68,66,32,0,0
 DB 32,82,69,83,66,32,60,110,62,13
 DB 10,0,0,32,84,73,77,69,83,32
 DB 60,110,62,32,68,66,32,48,13,10
 DB 0,8,78,79,84,32,69,65,88,13
 DB 10,0,0,44,60,110,62,13,10,0
 DB 8,83,72,76,32,69,65,88,44,49
 DB 13,10,0,1,83,72,76,32,69,66
 DB 88,44,49,13,10,0,1,68,69,67
 DB 32,66,89,84,69,32,91,69,66,88
 DB 93,13,10,0,1,68,69,67,32,87
 DB 79,82,68,32,91,69,66,88,93,13
 DB 10,0,9,67,68,81,13,10,73,68
 DB 73,86,32,69,66,88,13,10,0,9
 DB 88,79,82,32,69,68,88,44,69,68
 DB 88,13,10,68,73,86,32,69,66,88
 DB 13,10,0,0,32,68,68,32,0,0
 DB 32,68,68,32,60,110,62,13,10,0
 DB 0,32,84,73,77,69,83,32,60,110
 DB 62,32,68,68,32,48,13,10,0,64
 DB 80,85,83,72,32,69,66,80,13,10
 DB 77,79,86,32,69,66,80,44,69,83
 DB 80,13,10,0,8,60,103,62,79,82
 DB 32,69,65,88,44,69,65,88,13,10
 DB 74,69,32,95,60,100,62,13,10,74
 DB 77,80,32,95,60,110,62,13,10,95
 DB 60,100,62,58,13,10,0,-119,67,65
 DB 76,76,32,95,95,101,113,13,10,0
 DB 8,60,103,62,79,82,32,69,65,88
 DB 44,69,65,88,13,10,74,71,69,32
 DB 95,60,100,62,13,10,74,77,80,32
 DB 95,60,110,62,13,10,95,60,100,62
 DB 58,13,10,0,9,67,65,76,76,32
 DB 95,95,103,101,13,10,0,9,67,65
 DB 76,76,32,95,95,117,103,101,13,10
 DB 0,16,77,79,86,83,88,32,69,65
 DB 88,44,66,89,84,69,32,91,60,109
 DB 62,93,13,10,0,16,77,79,86,90
 DB 88,32,69,65,88,44,66,89,84,69
 DB 32,91,60,109,62,93,13,10,0,17
 DB 77,79,86,83,88,32,69,65,88,44
 DB 66,89,84,69,32,91,69,66,88,63
 DB 60,111,62,63,63,93,13,10,0,17
 DB 77,79,86,90,88,32,69,65,88,44
 DB 66,89,84,69,32,91,69,66,88,63
 DB 60,111,62,63,63,93,13,10,0,16
 DB 77,79,86,83,88,32,69,65,88,44
 DB 66,89,84,69,32,91,69,66,80,60
 DB 111,62,93,13,10,0,16,77,79,86
 DB 90,88,32,69,65,88,44,66,89,84
 DB 69,32,91,69,66,80,60,111,62,93
 DB 13,10,0,16,77,79,86,32,69,65
 DB 88,44,91,60,109,62,93,13,10,0
 DB 16,63,77,79,86,32,69,65,88,44
 DB 60,110,62,63,88,79,82,32,69,65
 DB 88,44,69,65,88,63,13,10,0,17
 DB 77,79,86,32,69,65,88,44,32,91
 DB 69,66,88,63,60,111,62,63,63,93
 DB 13,10,0,2,63,77,79,86,32,69
 DB 66,88,44,60,110,62,63,88,79,82
 DB 32,69,66,88,44,69,66,88,63,13
 DB 10,0,16,77,79,86,83,88,32,69
 DB 65,88,44,87,79,82,68,32,91,60
 DB 109,62,93,13,10,0,16,77,79,86
 DB 83,88,32,69,65,88,44,87,79,82
 DB 68,32,91,60,109,62,93,0,16,63
 DB 77,79,86,32,32,69,65,88,44,60
 DB 110,62,63,88,79,82,32,69,65,88
 DB 44,69,65,88,63,13,10,0,17,77
 DB 79,86,83,88,32,69,65,88,44,32
 DB 87,79,82,68,32,91,69,66,88,63
 DB 60,111,62,63,63,93,13,10,0,16
 DB 77,79,86,83,88,32,69,65,88,44
 DB 32,87,79,82,68,32,91,69,66,80
 DB 60,111,62,93,13,10,0,2,77,79
 DB 86,83,88,32,69,66,88,44,87,79
 DB 82,68,32,60,109,62,13,10,0,2
 DB 63,77,79,86,32,69,66,88,44,60
 DB 110,62,63,88,79,82,32,69,66,88
 DB 44,69,66,88,63,13,10,0,17,77
 DB 79,86,83,88,32,69,66,88,44,87
 DB 79,82,68,32,91,69,66,88,63,60
 DB 111,62,63,63,93,13,10,0,2,77
 DB 79,86,83,88,32,69,66,88,44,87
 DB 79,82,68,32,91,69,66,80,60,111
 DB 62,93,13,10,0,8,60,103,62,79
 DB 82,32,69,65,88,44,69,65,88,13
 DB 10,74,71,32,95,60,100,62,13,10
 DB 74,77,80,32,95,60,110,62,13,10
 DB 95,60,100,62,58,13,10,0,8,67
 DB 65,76,76,32,95,95,103,116,13,10
 DB 0,9,67,65,76,76,32,95,95,117
 DB 103,116,13,10,0,1,73,78,67,32
 DB 66,89,84,69,32,91,69,66,88,93
 DB 13,10,0,1,73,78,67,32,87,79
 DB 82,68,32,91,69,66,88,93,13,10
 DB 0,0,32,68,87,32,0,0,32,82
 DB 69,83,87,32,60,110,62,13,10,0
 DB 0,32,84,73,77,69,83,32,60,110
 DB 62,32,68,87,32,48,13,10,0,0
 DB 74,77,80,32,95,60,110,62,13,10
 DB 0,0,95,60,110,62,58,13,10,0
 DB 8,60,103,62,79,82,32,69,65,88
 DB 44,69,65,88,13,10,74,76,69,32
 DB 95,60,100,62,13,10,74,77,80,32
 DB 95,60,110,62,13,10,95,60,100,62
 DB 58,13,10,0,9,67,65,76,76,32
 DB 95,95,108,101,13,10,0,9,67,65
 DB 76,76,32,95,95,117,108,101,13,10
 DB 0,8,67,65,76,76,32,95,95,108
 DB 110,101,103,13,10,0,8,60,103,62
 DB 79,82,32,69,65,88,44,69,65,88
 DB 13,10,74,76,32,95,60,100,62,13
 DB 10,74,77,80,32,95,60,110,62,13
 DB 10,95,60,100,62,58,13,10,0,9
 DB 67,65,76,76,32,95,95,108,116,13
 DB 10,0,9,67,65,76,76,32,95,95
 DB 117,108,116,13,10,0,9,67,68,81
 DB 13,10,73,68,73,86,32,69,66,88
 DB 13,10,77,79,86,32,69,65,88,44
 DB 69,68,88,13,10,0,9,88,79,82
 DB 32,69,68,88,44,69,68,88,13,10
 DB 68,73,86,32,69,66,88,13,10,77
 DB 79,86,32,69,65,88,44,69,68,88
 DB 13,10,0,10,77,79,86,32,69,66
 DB 88,44,69,65,88,13,10,0,-119,73
 DB 77,85,76,32,69,66,88,13,10,0
 DB -119,77,85,76,32,69,66,88,13,10
 DB 0,8,60,103,62,79,82,32,69,65
 DB 88,44,69,65,88,13,10,74,78,69
 DB 32,95,60,100,62,13,10,74,77,80
 DB 32,95,60,110,62,13,10,95,60,100
 DB 62,58,13,10,0,-119,67,65,76,76
 DB 32,95,95,110,101,13,10,0,0,32
 DB 68,68,32,95,60,110,62,13,10,0
 DB -119,79,82,32,69,65,88,44,69,66
 DB 88,13,10,0,0,63,43,60,110,62
 DB 63,63,13,10,0,16,77,79,86,32
 DB 69,65,88,44,95,60,108,62,43,60
 DB 110,62,13,10,0,16,77,79,86,32
 DB 69,65,88,44,60,109,62,13,10,0
 DB 16,76,69,65,32,69,65,88,44,91
 DB 69,66,80,60,111,62,93,13,10,0
 DB 2,77,79,86,32,69,66,88,44,60
 DB 109,62,13,10,0,2,77,79,86,32
 DB 69,66,88,44,60,109,62,0,2,76
 DB 69,65,32,69,66,88,44,91,69,66
 DB 80,60,111,62,93,13,10,0,2,80
 DB 79,80,32,69,66,88,13,10,0,72
 DB 80,85,83,72,32,69,65,88,13,10
 DB 0,65,80,85,83,72,32,69,66,88
 DB 13,10,0,64,80,85,83,72,32,60
 DB 109,62,13,10,0,64,80,85,83,72
 DB 32,91,69,66,88,63,60,111,62,63
 DB 63,93,13,10,0,64,80,85,83,72
 DB 32,91,69,66,80,63,60,111,62,63
 DB 63,93,13,10,0,0,77,79,86,32
 DB 60,109,62,0,8,77,79,86,32,66
 DB 89,84,69,32,91,60,109,62,93,44
 DB 65,76,13,10,0,9,77,79,86,32
 DB 91,69,66,88,93,44,65,76,13,10
 DB 0,8,77,79,86,32,68,87,79,82
 DB 68,32,91,60,109,62,93,44,69,65
 DB 88,13,10,0,9,77,79,86,32,91
 DB 69,66,88,93,44,69,65,88,13,10
 DB 0,8,77,79,86,32,87,79,82,68
 DB 32,91,60,109,62,93,44,65,88,13
 DB 10,0,9,77,79,86,32,91,69,66
 DB 88,93,44,65,88,13,10,0,8,35
 DB 68,69,67,32,69,65,88,13,10,35
 DB 0,8,35,68,69,67,32,69,66,88
 DB 13,10,35,0,0,95,60,110,62,0
 DB 0,63,77,79,86,32,69,83,80,44
 DB 69,66,80,13,10,63,63,80,79,80
 DB 32,69,66,80,13,10,82,69,84,13
 DB 10,0,8,35,73,78,67,32,69,65
 DB 88,13,10,35,0,8,35,73,78,67
 DB 32,69,66,88,13,10,35,0,0,83
 DB 85,66,32,60,109,62,0,9,83,85
 DB 66,32,69,65,88,44,69,66,88,13
 DB 10,0,8,63,83,85,66,32,69,65
 DB 88,44,60,110,62,13,10,63,63,0
 DB 1,83,85,66,32,91,69,66,88,93
 DB 44,60,110,62,13,10,0,1,83,85
 DB 66,32,91,69,66,88,93,44,60,110
 DB 62,13,10,0,9,88,67,72,71,32
 DB 69,65,88,44,69,66,88,13,10,0
 DB 10,80,79,80,32,69,66,88,13,10
 DB 88,67,72,71,32,69,65,88,44,69
 DB 66,88,13,10,80,85,83,72,32,69
 DB 66,88,13,10,0,10,67,65,76,76
 DB 32,95,95,115,119,105,116,99,104,13
 DB 10,0,-119,88,79,82,32,69,65,88
 DB 44,69,66,88,13,10,0
   
_header:	; header() {
PUSH EBP
MOV  EBP,ESP
MOV  EAX,2	; CODESEG
PUSH EAX
MOV  CL,1
CALL _toseg	; toseg(CODESEG);
;ADD ESP,4
POP  EAX
MOV  EAX,1	; DATASEG
PUSH EAX
MOV  CL,1
CALL _toseg	; toseg(DATASEG);
;ADD ESP,4
POP  EAX
POP  EBP
RETN
   
_trailer:	; trailer() {
PUSH EBP	; STARTGLB = symtab+25*16
MOV  EBP,ESP
;ADD ESP,-4	; char *cp; (is not used)
MOV  EAX,[_symtab] ; cptr = STARTGLB;
;MOV EBX,400
;ADD EAX,EBX
ADD  EAX,400
MOV  DWORD [_cptr],EAX
_4_5:		; while(cptr < ENDGLB) {
MOV  EBX,[_cptr] ; ENDGLB = STARTGLB+199*20 
;PUSH EBX
MOV  EAX,[_symtab]
;;MOV EBX,400
;;ADD EAX,EBX
;ADD EAX,400
;;MOV EBX,3980
;;ADD EAX,EBX
;ADD EAX,3980
ADD  EAX,400+3980 	
;POP EBX
CALL __ult
OR   EAX,EAX
JZ   short _4_6 ; false
_4_7:		; if(cptr[IDENT] == FUNCTION
;MOV EBX,[_cptr]
;ebx = [_cptr]	; IDENT = 0
MOVSX EAX,BYTE [EBX]
;MOV EBX,EAX
;MOV EAX,4
MOV  EBX,4	; FUNCTION (ident value)
CALL __eq
OR   EAX,EAX
;JZ  short _4_9
JZ   short _4_8 ; false
;_4_11:
MOV  EAX,[_cptr]  ; && cptr[CLASS] == AUTOEXT)
;MOV EBX,2
;ADD EAX,EBX
;MOV EBX,EAX
;MOVSX EAX,BYTE [EBX]
;MOV EBX,EAX
;*ADD EAX,2;;; 	
INC  EAX
INC  EAX	 ; CLASS = 2
;MOVSX EBX,BYTE [EAX]
MOV  BL,[EAX]
;ebx = [eax]
MOV  EAX,4	 ; AUTOEXT (class value)
CALL __eq
;OR   EAX,EAX
;JZ short _4_9
;_4_12:
;MOV EAX,1
;JMP short _4_10
;_4_9:
;XOR EAX,EAX
_4_10:
OR   EAX,EAX
JZ   short _4_8
_4_13:
MOV  EAX,[_cptr]
;MOV EBX,11
;ADD EAX,EBX
ADD  EAX,11
PUSH EAX
XOR  EAX,EAX
PUSH EAX
MOV  EAX,4
PUSH EAX
MOV  CL,3
CALL _external	; external(cptr + NAME, 0, FUNCTION);
ADD  ESP,12
_4_8:
MOV  EAX,[_cptr] ; cptr += SYMMAX;	
;MOV EBX,20
;ADD EAX,EBX
ADD  EAX,20	; SYMMAX = 16+4
MOV  DWORD [_cptr],EAX
JMP  short _4_5
_4_6:
;XOR EAX,EAX
;eax = 0
PUSH EAX
MOV  CL,1
CALL _toseg	; toseg(NULL);
;ADD  ESP,4
POP  EAX
MOV  ESP,EBP
POP  EBP
RETN
   
_setstage:	; setstage(before, start)
PUSH EBP
MOV  EBP,ESP
LEA  EAX,[EBP+12]
MOV  EBX,[EAX]	; *before
MOV  EAX,[_snext]
MOV  [EBX],EAX	; *before = snext
OR   EAX,EAX	; if((*before = snext) == 0)
JNZ  short _4_15 ; false
_4_16:		; snext = stage;
MOV  EAX,[_stage]
MOV  DWORD [_snext],EAX
_4_15:		; *start = snext;
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]
MOV  EAX,[_snext]
MOV  [EBX],EAX
POP  EBP
RETN
   
_gen:		; gen(pcode, value)
PUSH EBP	; int pcode, value;
MOV  EBP,ESP
ADD  ESP,-4	; int newcsp;
LEA  EBX,[EBP+12]
MOV  EAX,[EBX]
JMP  _4_20
_4_21:		; case GETb1pu:
_4_22:		; case GETb1p:
_4_23:		; case GETw1p:
_4_24:		; case GETd1p:
MOV  EAX,51	; MOVE21
PUSH EAX
XOR  EAX,EAX	; 0
PUSH EAX
MOV  CL,2
CALL _gen	; gen(MOVE21, 0);
ADD  ESP,8
JMP  _4_19
_4_25:		; case SUB12:
_4_26:		; case MOD12:
_4_27:		; case MOD12u:
_4_28:		; case DIV12:
_4_29:		; case DIV12u:
MOV  EAX,70	; SWAP12
PUSH EAX
XOR  EAX,EAX	; 0
PUSH EAX
MOV  CL,2
CALL _gen	; gen(SWAP12, 0);
ADD  ESP,8
JMP  _4_19
_4_30:		; case PUSH1:
MOV  EAX,[_csp]	; #ifdef INT32, csp -= BPD;
;MOV EBX,4	; BPD (bytes per dword)
;SUB EAX,EBX
SUB  EAX,4	; - BPD
MOV  DWORD [_csp],EAX
JMP  _4_19
_4_31:		; case POP2:
MOV  EAX,[_csp]	; #ifdef INT32, csp += BPD;
;MOV EBX,4
;ADD EAX,EBX
ADD  EAX,4	; + BPD
MOV  DWORD [_csp],EAX
JMP  _4_19
_4_32:		; case ADDSP:
_4_33:
LEA  EBX,[EBP+8]
PUSH EBX
MOV  EAX,[EBX]	; value
LEA  EBX,[EBP-4]
MOV  [EBX],EAX	; newcsp = value;
MOV  EAX,[_csp] ; csp;
POP  EBX
SUB  [EBX],EAX	; value -= csp;
LEA  EBX,[EBP-4] ; csp = newcsp;
MOV  EAX,[EBX]
MOV  DWORD [_csp],EAX
JMP  short _4_19
_4_20:
CALL __switch
 DD  _4_21	; case GETb1pu:
 DD  29
 DD  _4_22	; case GETb1p:
 DD  28
 DD  _4_23	; case GETw1p:
 DD  32
 DD  _4_24	; case GETd1p:
 DD  109
 DD  _4_25	; case SUB12;
 DD  69
 DD  _4_26	; case MOD12:
 DD  49
 DD  _4_27	; case MOD12u:
 DD  50
 DD  _4_28	; case DIV12:
 DD  16
 DD  _4_29	; case DIV12u:
 DD  17
 DD  _4_30	; case PUSH1:
 DD  60
 DD  _4_31	; case POP2:
 DD  59
 DD  _4_32	; case ADDSP:
 DD  2
 DD  _4_33	; case RETURN:
 DD  67
 DD  0		; end (of switch/case options)
_4_19:
MOV  EAX,[_snext] ; if(snext == 0)	
OR   EAX,EAX
JNZ short _4_34 ; false
_4_35:		; true
LEA  EBX,[EBP+12]
MOV  EAX,[EBX]
PUSH EAX	; pcode
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]
PUSH EAX	; value
MOV  CL,2
CALL _outcode	; outcode(pcode, value);
ADD  ESP,8
MOV  ESP,EBP	; return;
POP  EBP
RETN
_4_34:		; if(snext >= slast)
MOV  EBX,[_snext]
MOV  EAX,[_slast]
CALL __uge
OR   EAX,EAX
JZ   short _4_36 ; false
_4_37:		; error("staging buffer overflow");
MOV  EAX,err_sbowf ; _4_17+0
PUSH EAX
MOV  CL,1
CALL _error
ADD  ESP,4
MOV  ESP,EBP	; return;	
POP  EBP
RETN
_4_36:
LEA  EBX,[EBP+12]
MOV  EAX,[EBX]
MOV  EBX,[_snext]
PUSH EBX ; *
MOV  [EBX],EAX	; snext[0] = pcode;
;MOV EAX,[_snext]
;MOV EBX,4
;ADD EAX,EBX
ADD  EBX,4
PUSH EBX
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]
POP  EBX
MOV  [EBX],EAX	; snext[1] = value;
;MOV EAX,[_snext]
POP  EAX ; *
; eax = [_snext]
;MOV EBX,8
;ADD EAX,EBX
ADD  EAX,8	; snext += 2;
MOV  DWORD [_snext],EAX
MOV  ESP,EBP
POP  EBP
RETN

_4_17:
err_sbowf: DB "staging buffer overflow",0
   
_clearsta:	; clearstage(before, start)
PUSH EBP
MOV  EBP,ESP
LEA  EBX,[EBP+12] ; if(before)
MOV  EAX,[EBX]
OR   EAX,EAX
JZ   short _4_39 ; false
_4_40:
LEA  EBX,[EBP+12] ; snext = before;	
MOV  EAX,[EBX]
MOV  DWORD [_snext],EAX
POP  EBP	; return;
RETN
_4_39:
LEA  EBX,[EBP+8] ; if(start)	
MOV  EAX,[EBX]
OR   EAX,EAX
JZ   short _4_41 ; false
_4_42:		; true
XOR  CL,CL
CALL _dumpstag	; dumpstage();
;eax = 0
_4_41:
;XOR EAX,EAX	; snext = 0;
;eax = 0
MOV  DWORD [_snext],EAX
POP  EBP
RETN
   
_dumpstag:	; dumpstage()
PUSH EBP
MOV  EBP,ESP
ADD  ESP,-4	; int i;
MOV  EAX,[_snext]
MOV  DWORD [_stail],EAX ; stail = snext;
MOV  EAX,[_stage]
MOV  DWORD [_snext],EAX ; snext = stage;
_4_44:		; while(snext < stail)
MOV  EBX,[_snext]
MOV  EAX,[_stail]
CALL __ult
OR   EAX,EAX
JNZ  short _4_46 ; true
;JMP _4_45
_4_45:		; false
;eax = 0
MOV  ESP,EBP
POP  EBP
RETN
_4_46:		; if(optimize)
MOVSX EAX,BYTE [_optimize]
OR   EAX,EAX
JZ   short _4_47 ; false
_4_48:		; true
_4_49:		; restart:
LEA  EBX,[EBP-4]
MOV  EAX,-1	; i = -1;
MOV  [EBX],EAX
_4_50:		; while(++i <= HIGH_SEQ)
LEA  EAX,[EBP-4]
MOV  EBX,[EAX]
INC  EBX
MOV  [EAX],EBX
MOV  EAX,47	; HIGH_SEQ
CALL __le
OR   EAX,EAX
JZ   short _4_51 ; false
_4_52:
LEA  EBX,[EBP-4] ; if(peep(seq[i]))
MOV  EAX,[EBX]
MOV  EBX,_seq
SHL  EAX,1
SHL  EAX,1
ADD  EBX,EAX
MOV  EAX,[EBX]
PUSH EAX
MOV  CL,1
CALL _peep
ADD  ESP,4
OR   EAX,EAX
JNZ  short _4_49 ; goto restart;	
JMP  short _4_50 ; jump to while(++i
_4_51:
_4_47:		; outcode(snext[0], snext[1]);
MOV  EBX,[_snext]
PUSH EBX ; *
MOV  EAX,[EBX]
PUSH EAX	; snext[0]
;MOV EBX,[_snext]
;MOV EAX,4
;ADD EBX,EAX
ADD  EBX,4
MOV  EAX,[EBX]
PUSH EAX	; snext[1]
MOV  CL,2
CALL _outcode
ADD  ESP,8
;MOV EAX,[_snext]
POP  EAX ; *
;MOV EBX,8
;ADD EAX,EBX
ADD  EAX,8
MOV  DWORD [_snext],EAX
JMP  _4_44
   
_toseg:
PUSH EBP
MOV  EBP,ESP
; not necessary (Erdogan tan - 21/09/2024)
;MOV  EAX,[_oldseg] 
;PUSH EAX
;LEA  EBX,[EBP+8]
;MOV  EAX,[EBX]
;POP  EBX
;CALL __eq
;OR   EAX,EAX
;JNZ  short _4_57
_4_56:
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]
MOV  DWORD [_oldseg],EAX
_4_57:
POP  EBP
RETN
   
_public:
PUSH EBP
MOV EBP,ESP
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,4
CALL __eq
OR EAX,EAX
JNE _4_60
JMP _4_59
_4_60:
MOV EAX,2
PUSH EAX
MOV CL,1
CALL _toseg
ADD ESP,4
JMP _4_61
_4_59:
MOV EAX,1
PUSH EAX
MOV CL,1
CALL _toseg
ADD ESP,4
_4_61:
XOR CL,CL
CALL _newline
MOV EAX,_ssname
PUSH EAX
MOV CL,1
CALL _outname
ADD ESP,4
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,4
CALL __eq
OR EAX,EAX
JNE _4_63
JMP _4_62
_4_63:
XOR CL,CL
CALL _colon
XOR CL,CL
CALL _newline
_4_62:
POP EBP
RET
   
_external:
PUSH EBP
MOV  EBP,ESP
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]
MOV  EBX,4
CALL __eq
OR   EAX,EAX
JZ   short _4_65
_4_66:
MOV  EAX,2
PUSH EAX
MOV  CL,1
CALL _toseg
ADD  ESP,4
JMP  _4_67
_4_65:
MOV  EAX,1
PUSH EAX
MOV  CL,1
CALL _toseg
ADD  ESP,4
_4_67:
POP  EBP
RETN
   
_outsize:	; outsize(size, ident)
PUSH EBP	; if (ident == FUNCTION)
MOV  EBP,ESP
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]	; ident
MOV  EAX,4	; FUNCTION
CALL __eq
OR   EAX,EAX
JZ   short _4_69
_4_70:
MOV  EAX,_NEAR_ ; _4_68+0
PUSH EAX
MOV  CL,1
CALL _outstr	; outstr("NEAR");
ADD  ESP,4
JMP  short _4_71
_4_69:		; else if (ident == POINTER)
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]
MOV  EAX,3	; POINTER
CALL __eq
OR   EAX,EAX
JZ   short _4_72
_4_73:
MOV  EAX,_DWORD_ ; _4_68+5
PUSH EAX
MOV  CL,1
CALL _outstr	; outstr("DWORD"); 
ADD  ESP,4
JMP  short _4_74
_4_72:		; else if(size == 1)
LEA  EAX,[EBP+12]
MOV  EBX,[EAX]
MOV  EAX,1
CALL __eq
OR   EAX,EAX
JZ   short _4_75
_4_76:
MOV  EAX,_BYTE_ ; _4_68+11
PUSH EAX
MOV  CL,1
CALL _outstr	; outstr("BYTE");
ADD  ESP,4
JMP  short _4_77
_4_75:		; else if(size == 2)
LEA  EAX,[EBP+12]
MOV  EBX,[EAX]
MOV  EAX,2
CALL __eq
OR   EAX,EAX
JZ   short _4_78
_4_79:
MOV  EAX,_WORD_ ; _4_68+16
PUSH EAX
MOV  CL,1
CALL _outstr	; outstr("WORD");
ADD  ESP,4
JMP  short _4_80
_4_78:		; else	
;MOV EAX,_DWORD2 ; _4_68+21
MOV EAX,_DWORD_
PUSH EAX
MOV  CL,1
CALL _outstr	; outstr("DWORD");
ADD  ESP,4
_4_80:
_4_77:
_4_74:
_4_71:
POP  EBP
RETN

_4_68:
_NEAR_: DB "NEAR",0
_DWORD_: DB "DWORD",0
_BYTE_: DB "BYTE",0
_WORD_: DB "WORD",0
;_DWORD2: DB "DWORD",0
   
_point:
PUSH EBP
MOV  EBP,ESP
MOV  EAX,_DW_2 ; _4_81+0
PUSH EAX
MOV  CL,1
CALL _outline
ADD  ESP,4
POP  EBP
RETN
_4_81:
_DW_2: DB " DW $+2"
       ; (DB 32,68,87,32,36,43,50,0)
   
_dumplits:	; dumplits(size)
PUSH EBP
MOV  EBP,ESP
;ADD ESP,-8	; int j, k;
;LEA EBX,[EBP-8]
XOR  EAX,EAX
;MOV [EBX],EAX	; k = 0;
PUSH EAX
PUSH EAX
_4_83:		; while (k < litptr)
LEA  EAX,[EBP-8]
MOV  EBX,[EAX]
MOV  EAX,[_litptr]
CALL __lt
OR   EAX,EAX
JNZ  short _4_85 ; true
_4_84:
MOV  ESP,EBP
POP  EBP
RETN
_4_85:		; if(size == 1)
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]
MOV  EAX,1
CALL __eq
OR   EAX,EAX
JZ   short _4_86
_4_87:		; gen(BYTE_, NULL);
MOV  EAX,10
PUSH EAX
XOR  EAX,EAX
PUSH EAX
MOV  CL,2
CALL _gen
ADD  ESP,8
JMP  short _4_88
_4_86:		; else if (size == 2)
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]
MOV  EAX,2
CALL __eq
OR   EAX,EAX
JZ   short _4_89
_4_90:		; gen(WORD_, NULL);
MOV  EAX,37
PUSH EAX
XOR  EAX,EAX
PUSH EAX
MOV  CL,2
CALL _gen
ADD  ESP,8
JMP  short _4_91
_4_89:		; else
MOV  EAX,111	; gen(DWORD_,NULL);
PUSH EAX
XOR  EAX,EAX
PUSH EAX
MOV  CL,2
CALL _gen
ADD  ESP,8
_4_91:
_4_88:		; j = 10;
LEA  EBX,[EBP-4]
MOV  EAX,10
MOV  [EBX],EAX
_4_92:		; while(j--)
LEA  EBX,[EBP-4]
MOV  EAX,[EBX]
;DEC EAX
;MOV [EBX],EAX
;INC EAX
DEC  DWORD [EBX]
OR   EAX,EAX
JNZ  short _4_94 
JMP  _4_83	; jump to while (k < litptr)
_4_94:		; outdec(getint(litq + k, size));
LEA  EBX,[EBP-8]
MOV  EAX,[EBX]	; k
MOV  EBX,[_litq]
ADD  EAX,EBX
PUSH EAX
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]	; size
PUSH EAX
MOV  CL,2
CALL _getint	; getint(litq + k, size)
ADD  ESP,8
PUSH EAX
MOV  CL,1
CALL _outdec
;ADD ESP,4
POP  EAX
LEA  EBX,[EBP-8]
PUSH EBX	; k address	
;MOV EAX,[EBX]
;PUSH EAX
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]	; size
;POP EBX
;ADD EAX,EBX
POP  EBX
;MOV [EBX],EAX	; k += size;
ADD  [EBX],EAX	; k value = k value + size
LEA  EAX,[EBP-4] ; if(j == 0 || k >= litptr)
MOV  EBX,[EAX]	; j
XOR  EAX,EAX
CALL __eq
OR   EAX,EAX
JNZ  short _4_100 ; true (j = 0)
_4_98:
LEA  EAX,[EBP-8]
MOV  EBX,[EAX]	; k value
MOV  EAX,[_litptr]
CALL __ge
OR   EAX,EAX
JZ  short _4_95 ; false (k < litptr)
_4_100:		; true 
XOR  CL,CL
CALL _newline	; newline();
JMP  _4_83	; break; (while(j--))
_4_95:
MOV  EAX,44	; ','
PUSH EAX
MOV  EAX,[_output]
PUSH EAX
MOV  CL,2
CALL _OS_fputc	; fputc(',', output);
ADD  ESP,8
JMP  _4_92	; jump to while(j--)
   
_dumpzero:	; dumpzero(size, count)
PUSH EBP
MOV  EBP,ESP
LEA  EBX,[EBP+8] ; if(count > 0)
MOV  EAX,[EBX]
OR   EAX,EAX
JNG  short _4_102
_4_103:
LEA  EAX,[EBP+12] ; if(size == 1)
MOV  EBX,EAX
MOV  EAX, [EBX]
MOV  EBX,EAX
MOV  EAX,1
CALL __eq
OR   EAX,EAX
JZ   short _4_104 ; false, return
_4_105:
MOV  EAX,12
PUSH EAX
LEA  EAX,[EBP+8]
MOV  EBX,EAX
MOV  EAX, [EBX]
PUSH EAX
MOV  CL,2
CALL _gen	; gen(BYTEr0, count);
ADD  ESP,8
JMP  short _4_106
_4_104:
LEA  EAX,[EBP+12] ; else if (size == 2)
MOV  EBX,[EAX]
MOV  EAX,2
CALL __eq
OR   EAX,EAX
JZ  short _4_107
_4_108:
MOV  EAX,39
PUSH EAX
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]
PUSH EAX
MOV  CL,2
CALL _gen	; gen(WORDr0, count);
ADD  ESP,8
JMP  short _4_109
_4_107:		 ; else
MOV  EAX,113
PUSH EAX
LEA  EBX,[EBP+8]
MOV  EAX,[EBX]
PUSH EAX
MOV  CL,2
CALL _gen	; gen(DWORDr0, count);
ADD  ESP,8
_4_109:
_4_106:
_4_102:
POP  EBP
RETN
   
_peep:
PUSH EBP
MOV EBP,ESP
ADD ESP,-32
LEA EAX,[EBP-4]
PUSH EAX
MOV EAX,[_snext]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-8]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
INC EAX
INC EAX
INC EAX
MOV [EBX],EAX
DEC EAX
DEC EAX
DEC EAX
DEC EAX
POP EBX
MOV [EBX],EAX
_4_111:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JNE _4_113
JMP _4_112
_4_113:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
JMP _4_116
_4_117:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV EAX,[_stail]
POP EBX
CALL __ult
OR EAX,EAX
JNE _4_119
JMP _4_118
_4_119:
JMP _4_115
_4_118:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_120:
MOV EAX,24
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV CL,2
CALL _isfree
ADD ESP,8
OR EAX,EAX
JNE _4_122
JMP _4_121
_4_122:
JMP _4_115
_4_121:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_123:
MOV EAX,3
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV CL,2
CALL _isfree
ADD ESP,8
OR EAX,EAX
JNE _4_125
JMP _4_124
_4_125:
JMP _4_115
_4_124:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_126:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,128
AND EAX,EBX
OR EAX,EAX
JNE _4_128
JMP _4_127
_4_128:
JMP _4_115
_4_127:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_129:
LEA EAX,[EBP-12]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV CL,1
CALL _getpop
ADD ESP,4
POP EBX
MOV [EBX],EAX
OR EAX,EAX
JNE _4_131
JMP _4_130
_4_131:
JMP _4_115
_4_130:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_132:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV EAX,[_stail]
POP EBX
CALL __uge
OR EAX,EAX
JE _4_136
JMP _4_134
_4_136:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
CALL __ne
OR EAX,EAX
JE _4_137
JMP _4_134
_4_137:
XOR EAX,EAX
JMP _4_135
_4_134:
MOV EAX,1
_4_135:
OR EAX,EAX
JNE _4_138
JMP _4_133
_4_138:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_133:
JMP _4_115
_4_116:
CALL __switch
 DD _4_117
 DD 255
 DD _4_120
 DD 253
 DD _4_123
 DD 252
 DD _4_126
 DD 251
 DD _4_129
 DD 254
 DD 0
JMP _4_132
_4_115:
LEA EAX,[EBP-4]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,8
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
INC EAX
INC EAX
INC EAX
MOV [EBX],EAX
JMP _4_111
_4_112:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,1
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-28]
PUSH EAX
LEA EAX,[EBP-20]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
POP EBX
MOV [EBX],EAX
_4_139:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
INC EAX
INC EAX
INC EAX
MOV [EBX],EAX
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_143
JMP _4_141
_4_143:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_144
JMP _4_141
_4_144:
XOR EAX,EAX
JMP _4_142
_4_141:
MOV EAX,1
_4_142:
OR EAX,EAX
JNE _4_145
JMP _4_140
_4_145:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JNE _4_147
JMP _4_146
_4_147:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_149
JMP _4_148
_4_149:
LEA EAX,[EBP-20]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
_4_148:
JMP _4_139
_4_146:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,116
CALL __ge
OR EAX,EAX
JNE _4_151
JMP _4_150
_4_151:
LEA EAX,[EBP-32]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,255
AND EAX,EBX
POP EBX
MOV [EBX],AL
LEA EAX,[EBP-16]
PUSH EAX
LEA EAX,[EBP-32]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,65280
AND EAX,EBX
JMP _4_154
_4_155:
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
CALL __ne
OR EAX,EAX
JNE _4_157
JMP _4_156
_4_157:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
_4_156:
JMP _4_153
_4_158:
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
CALL __ge
OR EAX,EAX
JNE _4_160
JMP _4_159
_4_160:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
_4_159:
JMP _4_153
_4_161:
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAL EAX,CL
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV DWORD [_snext],EAX
JMP _4_153
_4_162:
MOV EAX,[_snext]
PUSH EAX
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAL EAX,CL
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
JMP _4_163
_4_164:
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAL EAX,CL
MOV EBX,1
ADD EAX,EBX
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
JMP _4_163
_4_165:
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAL EAX,CL
MOV EBX,1
ADD EAX,EBX
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
JMP _4_163
_4_166:
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
NEG EAX
POP EBX
MOV [EBX],EAX
JMP _4_163
_4_167:
LEA EAX,[EBP-12]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-12]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
JMP _4_163
_4_168:
LEA EAX,[EBP-24]
PUSH EAX
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
MOV EAX,[_snext]
MOV EBX,4
ADD EAX,EBX
PUSH EAX
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAL EAX,CL
MOV EBX,1
ADD EAX,EBX
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAL EAX,CL
MOV EBX,1
ADD EAX,EBX
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
PUSH EAX
LEA EAX,[EBP-24]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
_4_163:
LEA EAX,[EBP-28]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
JMP _4_153
JMP _4_153
_4_154:
CALL __switch
 DD _4_155
 DD 1536
 DD _4_158
 DD 1792
 DD _4_161
 DD 256
 DD _4_162
 DD 512
 DD _4_164
 DD 768
 DD _4_165
 DD 1024
 DD _4_166
 DD 1280
 DD _4_167
 DD 2304
 DD _4_168
 DD 2048
 DD 0
_4_153:
JMP _4_169
_4_150:
MOV EAX,[_snext]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
_4_169:
JMP _4_139
_4_140:
LEA EAX,[EBP-28]
MOV EBX,EAX
MOV EAX, [EBX]
MOV ESP,EBP
POP EBP
RET
   
_isfree:
PUSH EBP
MOV EBP,ESP
ADD ESP,-4
_4_171:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV EAX,[_stail]
POP EBX
CALL __ult
OR EAX,EAX
JNE _4_173
JMP _4_172
_4_173:
LEA EAX,[EBP-4]
PUSH EAX
MOV EAX,_code
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,9
AND EAX,EBX
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
AND EAX,EBX
OR EAX,EAX
JNE _4_175
JMP _4_174
_4_175:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_174:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,18
AND EAX,EBX
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
AND EAX,EBX
OR EAX,EAX
JNE _4_177
JMP _4_176
_4_177:
MOV EAX,1
MOV ESP,EBP
POP EBP
RET
_4_176:
LEA EAX,[EBP+8]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,8
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
JMP _4_171
_4_172:
MOV EAX,[_usexpr]
OR EAX,EAX
JNE _4_179
JMP _4_178
_4_179:
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
AND EAX,EBX
MOV ESP,EBP
POP EBP
RET
_4_178:
MOV EAX,1
MOV ESP,EBP
POP EBP
RET
_4_180:
MOV ESP,EBP
POP EBP
RET
   
_getpop:
PUSH EBP
MOV EBP,ESP
ADD ESP,-8
LEA EAX,[EBP-8]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
_4_182:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV EAX,[_stail]
POP EBX
CALL __uge
OR EAX,EAX
JNE _4_185
JMP _4_184
_4_185:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_184:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,59
CALL __eq
OR EAX,EAX
JNE _4_187
JMP _4_186
_4_187:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JNE _4_189
JMP _4_188
_4_189:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
DEC EAX
MOV [EBX],EAX
JMP _4_190
_4_188:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV ESP,EBP
POP EBP
RET
_4_190:
JMP _4_191
_4_186:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,2
CALL __eq
OR EAX,EAX
JNE _4_193
JMP _4_192
_4_193:
LEA EAX,[EBP-8]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,4
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
MOV ECX,EAX
MOV EAX,EBX
SAR EAX,CL
POP EBX
XCHG EAX,EBX
SUB EAX,EBX
POP EBX
MOV [EBX],EAX
OR EAX,EAX
JL _4_195
JMP _4_194
_4_195:
XOR EAX,EAX
MOV ESP,EBP
POP EBP
RET
_4_194:
JMP _4_196
_4_192:
LEA EAX,[EBP-4]
PUSH EAX
MOV EAX,_code
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,64
AND EAX,EBX
OR EAX,EAX
JNE _4_198
JMP _4_197
_4_198:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
_4_197:
_4_196:
_4_191:
LEA EAX,[EBP+8]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,8
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
JMP _4_182
_4_183:
MOV ESP,EBP
POP EBP
RET
   
_colon:		; colon() {
PUSH EBP
MOV  EBP,ESP
MOV  EAX,58	; ':'
PUSH EAX
MOV  EAX,[_output]
PUSH EAX
MOV  CL,2
CALL _OS_fputc	; fputc(':', output);
ADD  ESP,8
POP  EBP
RETN
   
_newline:	; newline() {
PUSH EBP
MOV  EBP,ESP
MOV  EAX,13	; CR
PUSH EAX
MOV  EAX,[_output] ; fputc('\15', output);
PUSH EAX
MOV  CL,2
CALL _OS_fputc
ADD  ESP,8
MOV  EAX,10	; LF
PUSH EAX
MOV  EAX,[_output] ; fputc(NEWLINE, output);
PUSH EAX
MOV  CL,2
CALL _OS_fputc
ADD  ESP,8
POP  EBP
RETN
   
_outcode:
PUSH EBP
MOV EBP,ESP
ADD ESP,-28
LEA EAX,[EBP-4]
PUSH EAX
LEA EAX,[EBP-24]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-20]
PUSH EAX
MOV EAX,_code
PUSH EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
SHL EAX,1
SHL EAX,1
ADD EAX,EBX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,1
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,74
CALL __eq
OR EAX,EAX
JNE _4_203
JMP _4_202
_4_203:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JL _4_205
JMP _4_204
_4_205:
LEA EAX,[EBP+12]
MOV EBX,EAX
MOV EAX,104
MOV [EBX],EAX
LEA EAX,[EBP+8]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
NEG EAX
POP EBX
MOV [EBX],EAX
_4_204:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,128
CALL __lt
OR EAX,EAX
JNE _4_207
JMP _4_206
_4_207:
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
_4_206:
_4_202:
_4_208:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
OR EAX,EAX
JNE _4_210
JMP _4_209
_4_210:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,60
CALL __eq
OR EAX,EAX
JNE _4_212
JMP _4_211
_4_212:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_214
JMP _4_213
_4_214:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
JMP _4_217
_4_218:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,11
ADD EAX,EBX
PUSH EAX
MOV CL,1
CALL _outname
ADD ESP,4
JMP _4_216
_4_219:
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JNE _4_221
JMP _4_220
_4_221:
MOV EAX,_4_201+0
PUSH EAX
MOV CL,1
CALL _outstr
ADD ESP,4
_4_220:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV CL,1
CALL _outdec
ADD ESP,4
JMP _4_216
_4_222:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
MOV CL,1
CALL _offset
ADD ESP,4
JMP _4_216
_4_223:		; case 'l':
MOV  EAX,[_litlab]
PUSH EAX
MOV  CL,1
CALL _outdec	; outdec(litlab);
;ADD ESP,4
POP  EAX
JMP  short _4_216
_4_224:		; case 'g':
LEA  EAX,[EBP-28]
PUSH EAX
XOR  CL,CL
CALL _getlabel	; getlabel()
POP  EBX
MOV  [EBX],EAX	; loc_label = getlabel ();
JMP  short _4_216
_4_225:		; case 'd':
LEA  EAX,[EBP-28]
MOV  EBX,EAX
MOV  EAX, [EBX]
PUSH EAX
MOV  CL,1
CALL _outdec	; outdec(loc_label);
;ADD ESP,4
POP  EAX
JMP short _4_216 ; break;
_4_217:
CALL __switch
 DD _4_218
 DD 109
 DD _4_219
 DD 110
 DD _4_222
 DD 111
 DD _4_223
 DD 108
 DD _4_224
 DD 103
 DD _4_225	; case 'd':
 DD 100
 DD 0
_4_216:
_4_213:
LEA EAX,[EBP-20]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,2
ADD EAX,EBX
POP EBX
MOV [EBX],EAX
JMP _4_226
_4_211:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,63
CALL __eq
OR EAX,EAX
JNE _4_228
JMP _4_227
_4_228:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
JMP _4_231
_4_232:
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_234
JMP _4_233
_4_234:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
_4_233:
JMP _4_230
_4_235:
LEA EAX,[EBP-8]
PUSH EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
CALL __lneg
POP EBX
MOV [EBX],EAX
JMP _4_230
_4_236:
LEA EAX,[EBP-4]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-8]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
JMP _4_230
JMP _4_230
_4_231:
CALL __switch
 DD _4_232
 DD 1
 DD _4_235
 DD 2
 DD _4_236
 DD 3
 DD 0
_4_230:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
JMP _4_237
_4_227:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,35
CALL __eq
OR EAX,EAX
JNE _4_239
JMP _4_238
_4_239:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
LEA EAX,[EBP-24]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_241
JMP _4_240
_4_241:
LEA EAX,[EBP-12]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
MOV EBX,EAX
MOV EAX,1
CALL __lt
OR EAX,EAX
JNE _4_243
JMP _4_242
_4_243:
_4_244:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
OR EAX,EAX
JNE _4_248
JMP _4_246
_4_248:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
DEC EAX
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,35
CALL __ne
OR EAX,EAX
JNE _4_249
JMP _4_246
_4_249:
MOV EAX,1
JMP _4_247
_4_246:
XOR EAX,EAX
_4_247:
OR EAX,EAX
JNE _4_250
JMP _4_245
_4_250:
JMP _4_244
_4_245:
JMP _4_208
_4_242:
LEA EAX,[EBP-24]
PUSH EAX
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
JMP _4_208
_4_240:
LEA EAX,[EBP-12]
MOV EBX,EAX
MOV EAX, [EBX]
DEC EAX
MOV [EBX],EAX
OR EAX,EAX
JG _4_252
JMP _4_251
_4_252:
LEA EAX,[EBP-20]
PUSH EAX
LEA EAX,[EBP-24]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
JMP _4_253
_4_251:
LEA EAX,[EBP-24]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
_4_253:
JMP _4_254
_4_238:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_256
JMP _4_255
_4_256:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
DEC EAX
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
PUSH EAX
MOV EAX,[_output]
PUSH EAX
MOV CL,2
CALL _OS_fputc
ADD ESP,8
JMP _4_257
_4_255:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
_4_257:
_4_254:
_4_237:
_4_226:
JMP _4_208
_4_209:
MOV ESP,EBP
POP EBP
RET
_4_201 DB 66,89,84,69,32,0

_outdec:
PUSH EBP
MOV EBP,ESP
ADD ESP,-20
LEA EAX,[EBP-8]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,1000000000
MOV [EBX],EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JL _4_260
JMP _4_259
_4_260:
LEA EAX,[EBP+8]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
NEG EAX
POP EBX
MOV [EBX],EAX
MOV EAX,45
PUSH EAX
MOV EAX,[_output]
PUSH EAX
MOV CL,2
CALL _OS_fputc
ADD ESP,8
_4_259:
_4_261:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
CALL __ge
OR EAX,EAX
JNE _4_263
JMP _4_262
_4_263:
LEA EAX,[EBP-16]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-20]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
_4_264:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
CALL __uge
OR EAX,EAX
JNE _4_266
JMP _4_265
_4_266:
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
LEA EAX,[EBP-20]
PUSH EAX
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
XCHG EAX,EBX
SUB EAX,EBX
POP EBX
MOV [EBX],EAX
JMP _4_264
_4_265:
LEA EAX,[EBP-12]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,48
ADD EAX,EBX
POP EBX
MOV [EBX],AL
LEA EAX,[EBP-12]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,48
CALL __ne
OR EAX,EAX
JE _4_270
JMP _4_268
_4_270:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
CALL __eq
OR EAX,EAX
JE _4_271
JMP _4_268
_4_271:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_272
JMP _4_268
_4_272:
XOR EAX,EAX
JMP _4_269
_4_268:
MOV EAX,1
_4_269:
OR EAX,EAX
JNE _4_273
JMP _4_267
_4_273:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
LEA EAX,[EBP-12]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
PUSH EAX
MOV EAX,[_output]
PUSH EAX
MOV CL,2
CALL _OS_fputc
ADD ESP,8
_4_267:
LEA EAX,[EBP+8]
PUSH EAX
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-4]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,10
XCHG EAX,EBX
CDQ
IDIV EBX
POP EBX
MOV [EBX],EAX
JMP _4_261
_4_262:
MOV ESP,EBP
POP EBP
RET
   
_offset:
PUSH EBP
MOV EBP,ESP
ADD ESP,-20
LEA EAX,[EBP-8]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX,1000000000
MOV [EBX],EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JL _4_276
JMP _4_275
_4_276:
LEA EAX,[EBP+8]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
NEG EAX
POP EBX
MOV [EBX],EAX
MOV EAX,45
PUSH EAX
MOV EAX,[_output]
PUSH EAX
MOV CL,2
CALL _OS_fputc
ADD ESP,8
JMP _4_277
_4_275:
MOV EAX,43
PUSH EAX
MOV EAX,[_output]
PUSH EAX
MOV CL,2
CALL _OS_fputc
ADD ESP,8
_4_277:
_4_278:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
CALL __ge
OR EAX,EAX
JNE _4_280
JMP _4_279
_4_280:
LEA EAX,[EBP-16]
MOV EBX,EAX
XOR EAX,EAX
MOV [EBX],EAX
LEA EAX,[EBP-20]
PUSH EAX
LEA EAX,[EBP+8]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
_4_281:
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
CALL __uge
OR EAX,EAX
JNE _4_283
JMP _4_282
_4_283:
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
INC EAX
MOV [EBX],EAX
LEA EAX,[EBP-20]
PUSH EAX
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
PUSH EAX
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
XCHG EAX,EBX
SUB EAX,EBX
POP EBX
MOV [EBX],EAX
JMP _4_281
_4_282:
LEA EAX,[EBP-12]
PUSH EAX
LEA EAX,[EBP-16]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,48
ADD EAX,EBX
POP EBX
MOV [EBX],AL
LEA EAX,[EBP-12]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,48
CALL __ne
OR EAX,EAX
JE _4_287
JMP _4_285
_4_287:
LEA EAX,[EBP-4]
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,1
CALL __eq
OR EAX,EAX
JE _4_288
JMP _4_285
_4_288:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX, [EBX]
OR EAX,EAX
JE _4_289
JMP _4_285
_4_289:
XOR EAX,EAX
JMP _4_286
_4_285:
MOV EAX,1
_4_286:
OR EAX,EAX
JNE _4_290
JMP _4_284
_4_290:
LEA EAX,[EBP-8]
MOV EBX,EAX
MOV EAX,1
MOV [EBX],EAX
LEA EAX,[EBP-12]
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
PUSH EAX
MOV EAX,[_output]
PUSH EAX
MOV CL,2
CALL _OS_fputc
ADD ESP,8
_4_284:
LEA EAX,[EBP+8]
PUSH EAX
LEA EAX,[EBP-20]
MOV EBX,EAX
MOV EAX, [EBX]
POP EBX
MOV [EBX],EAX
LEA EAX,[EBP-4]
PUSH EAX
MOV EBX,EAX
MOV EAX, [EBX]
MOV EBX,EAX
MOV EAX,10
XCHG EAX,EBX
CDQ
IDIV EBX
POP EBX
MOV [EBX],EAX
JMP _4_278
_4_279:
MOV ESP,EBP
POP EBP
RET
   
_outline:		; outline(ptr)
PUSH EBP
MOV  EBP,ESP
LEA  EBX,[EBP+8]	; char ptr[];
MOV  EAX,[EBX]
PUSH EAX
MOV  CL,1
CALL _outstr		; outstr(ptr);
ADD  ESP,4
XOR  CL,CL
CALL _newline		; newline();
POP  EBP
RET
   
_outname:		; outname(ptr)
PUSH EBP
MOV  EBP,ESP
MOV  EAX,UNDERSCORE	; _4_292+0
PUSH EAX
MOV  CL,1
CALL _outstr		; outstr("_");
;ADD ESP,4
POP  EAX
_4_293:			; while(*ptr >= ' ')
LEA  EBX,[EBP+8]	; char ptr[];
MOV  EAX,[EBX]
MOVSX EBX,BYTE [EAX]
MOV  EAX,32		; SPACE
CALL __ge
OR   EAX,EAX
JZ   short _4_294
_4_295:			; fputc(*ptr++, output);
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]
INC  DWORD [EAX]	; *ptr++
MOVSX EAX,BYTE [EBX]	; char = *ptr
PUSH EAX
MOV  EAX,[_output]	; file handle
PUSH EAX
MOV  CL,2
CALL _OS_fputc
ADD  ESP,8
JMP  short _4_293
_4_294:
POP  EBP
RETN

_4_292:
UNDERSCORE: DB "_",0 ; DB 95,0
   
_outstr:		; outstr(ptr)
PUSH EBP
MOV  EBP,ESP
_4_297:	; while(*ptr == '\t' || *ptr >= ' ')
LEA  EBX,[EBP+8]	; char ptr[];
MOV  EAX,[EBX]
MOVSX EBX,BYTE [EAX]
MOV  EAX,9		; '\t' ; TAB
CALL __eq
OR   EAX,EAX
JNZ  short _4_303	; condition 1 = true
;LEA EBX,[EBP+8]
;MOV EAX,[EBX]
;MOVSX EBX,BYTE [EAX]
MOV  EAX,32		; SPACE
CALL __ge
OR   EAX,EAX
JZ   short _4_298	; condition 2 = false
_4_303:	
LEA  EAX,[EBP+8]
MOV  EBX,[EAX]
INC  DWORD [EAX]	; *ptr++
MOVSX EAX,BYTE [EBX]	; char = *ptr 
PUSH EAX
MOV  EAX,[_output]	; file handle
PUSH EAX
MOV  CL,2
CALL _OS_fputc		; fputc(*ptr++, output);
ADD  ESP,8
JMP  short _4_297
_4_298:
POP  EBP
RETN
   
_outtab:		 ; outtab ()
PUSH EBP
MOV  EBP,ESP
MOV  EAX,9
PUSH EAX
MOV  EAX,[_output]
PUSH EAX
MOV  CL,2
CALL _OS_fputc		; fputc ('\t', output);
ADD  ESP,8
POP  EBP
RETN
   