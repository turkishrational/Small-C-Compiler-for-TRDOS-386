; -----------------------------------------------------------
; Small C Compiler for TRDOS 386 (v2.0.9 and later)
; Erdogan Tan - 2024
; Beginning: 05/09/2024
; Last Update: 18/09/2024
; -----------------------------------------------------------
; Derived from 'cc2.asm' file of KolibriOS SCC source code
; 2024

_preprocess:
PUSH EBP
MOV EBP,ESP
ADD ESP,-8	; int k; char c;
MOV EAX,[_ccode] ; if(ccode) {
OR EAX,EAX
JZ short _2_2	; false
_2_3:		; true
MOV EAX,[_mline]
MOV DWORD [_line],EAX ; line = mline;
XOR CL,CL
CALL _ifline	; ifline();
MOV EAX,[_eof]
OR EAX,EAX	; if(eof) return;
;JZ short _2_4
JZ short _2_6
_2_5:
MOV ESP,EBP
POP EBP
RETN
;_2_4:
;JMP short _2_6
_2_2:	 	; else
XOR CL,CL
CALL _inline	; inline();
;MOV ESP,EBP	; return;
;POP EBP
;RETN
JMP short _2_5
_2_6:
;MOV EAX,-1
DEC EAX
;eax = -1
MOV DWORD [_pptr],EAX ; pptr = -1;
_2_7:		; while(ch != NEWLINE && ch) {
MOV EBX,[_ch]
MOV EAX,10	; NEWLINE
CALL __ne
OR EAX,EAX
JZ short _2_9
_2_11:		; (ch != NEWLINE && ch)
MOV EAX,[_ch]
OR EAX,EAX
JZ short _2_9
_2_12:
MOV EAX,1
;JMP _2_10
_2_9:
;XOR EAX,EAX
_2_10:
OR EAX,EAX
JZ short _2_13
JMP _2_8	; jump to if(white()) {
_2_13:
XOR CL,CL
CALL _white
OR EAX,EAX
JZ short _2_14
_2_15:
MOV EAX,32
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
_2_16:
XOR CL,CL
CALL _white
OR EAX,EAX
;JZ short _2_17
JZ short _2_7
_2_18:
XOR CL,CL
CALL _gch
JMP short _2_16
_2_17:
;JMP _2_19
;JMP short _2_7
_2_14:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,34
CALL __eq
OR EAX,EAX
JNE _2_21
JMP _2_20
_2_21:
MOV EAX,[_ch]
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
XOR CL,CL
CALL _gch
_2_22:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,34
CALL __ne
OR EAX,EAX
JE _2_28
JMP _2_24
_2_28:
MOV EAX,[_lptr]
MOV EBX,EAX
MOV EAX,1
XCHG EAX,EBX
SUB EAX,EBX
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,92
CALL __eq
OR EAX,EAX
JNE _2_29
JMP _2_25
_2_29:
MOV EAX,[_lptr]
MOV EBX,EAX
MOV EAX,2
XCHG EAX,EBX
SUB EAX,EBX
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,92
CALL __ne
OR EAX,EAX
JNE _2_30
JMP _2_25
_2_30:
MOV EAX,1
JMP _2_26
_2_25:
XOR EAX,EAX
_2_26:
OR EAX,EAX
JE _2_31
JMP _2_24
_2_31:
XOR EAX,EAX
JMP _2_27
_2_24:
MOV EAX,1
_2_27:
OR EAX,EAX
JNE _2_32
JMP _2_23
_2_32:
MOV EAX,[_ch]
OR EAX,EAX
JE _2_34
JMP _2_33
_2_34:
MOV EAX,_2_1+0
PUSH EAX
MOV CL,1
CALL _error
ADD ESP,4
JMP _2_23
_2_33:
XOR CL,CL
CALL _gch
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
JMP _2_22
_2_23:
XOR CL,CL
CALL _gch
MOV EAX,34
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
JMP _2_35
_2_20:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,39
CALL __eq
OR EAX,EAX
JNE _2_37
JMP _2_36
_2_37:
MOV EAX,39
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
XOR CL,CL
CALL _gch
_2_38:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,39
CALL __ne
OR EAX,EAX
JE _2_44
JMP _2_40
_2_44:
MOV EAX,[_lptr]
MOV EBX,EAX
MOV EAX,1
XCHG EAX,EBX
SUB EAX,EBX
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,92
CALL __eq
OR EAX,EAX
JNE _2_45
JMP _2_41
_2_45:
MOV EAX,[_lptr]
MOV EBX,EAX
MOV EAX,2
XCHG EAX,EBX
SUB EAX,EBX
MOV EBX,EAX
MOVSX EAX,BYTE [EBX]
MOV EBX,EAX
MOV EAX,92
CALL __ne
OR EAX,EAX
JNE _2_46
JMP _2_41
_2_46:
MOV EAX,1
JMP _2_42
_2_41:
XOR EAX,EAX
_2_42:
OR EAX,EAX
JE _2_47
JMP _2_40
_2_47:
XOR EAX,EAX
JMP _2_43
_2_40:
MOV EAX,1
_2_43:
OR EAX,EAX
JNE _2_48
JMP _2_39
_2_48:
MOV EAX,[_ch]
OR EAX,EAX
JE _2_50
JMP _2_49
_2_50:
MOV EAX,_2_1+9
PUSH EAX
MOV CL,1
CALL _error
ADD ESP,4
JMP _2_39
_2_49:
XOR CL,CL
CALL _gch
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
JMP _2_38
_2_39:
XOR CL,CL
CALL _gch
MOV EAX,39
PUSH EAX
MOV CL,1
CALL _keepch
ADD ESP,4
JMP _2_51
_2_36:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,47
CALL __eq
OR EAX,EAX
JZ short _2_53
_2_55:
MOV EAX,[_nch]
MOV EBX,EAX
MOV EAX,42
CALL __eq
OR EAX,EAX
;JZ short _2_53
JNZ short _2_57
;_2_56:
;MOV EAX,1
;eax = 1
;JMP short _2_54
;_2_53:
;XOR EAX,EAX
;_2_54:
;OR EAX,EAX
;JNZ short _2_57
_2_53:
JMP _2_52
_2_57:
MOV EAX,2
PUSH EAX
MOV CL,1
CALL _bump
ADD ESP,4
_2_58:
MOV EBX,[_ch]	; while((ch == '*' && nch == '/') == 0)
MOV EAX,42		; '*'
CALL __eq
OR EAX,EAX
;JZ short _2_60
JZ short _2_64		; == 0
_2_62:
MOV EBX,[_nch]		; && nch == '/')
MOV EAX,47		;  '/'
CALL __eq
;OR EAX,EAX
;JZ short _2_60
;_2_63:
;MOV EAX,1
;eax = 1
;JMP _2_61
;_2_60:
;XOR EAX,EAX
_2_61:
OR EAX,EAX
JNZ short _2_59		; != 0
_2_64:		; (ch == '*' && nch == '/') == 0
MOV EAX,[_ch]		; if(ch)
OR EAX,EAX
JZ short _2_65		; else
_2_66:
MOV EAX,1		; bump(1);
PUSH EAX
MOV CL,1
CALL _bump
ADD ESP,4
;JMP short _2_67
JMP short _2_58		; jump to while((ch == '*'
_2_65:
XOR CL,CL
CALL _ifline
MOV EAX,[_eof]
OR EAX,EAX
;JNZ short _2_69
JZ short _2_58
;JMP _2_68
;_2_69:
;JMP _2_59
;_2_68:
;_2_67:
;JMP _2_58
_2_59:
MOV EAX,2		; bump(2);
PUSH EAX
MOV CL,1
CALL _bump
;ADD ESP,4
POP EAX
;JMP _2_70
jmp _2_7		; jump to while(ch != NEWLINE
_2_52:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,47
CALL __eq
OR EAX,EAX
;JZ short _2_72
JZ short _2_71
_2_74:
MOV EAX,[_nch]
MOV EBX,EAX
MOV EAX,47
CALL __eq
OR EAX,EAX
;JZ short _2_72
JZ short _2_71
_2_75:
MOV EAX,1
;JMP short _2_73
;_2_72:
;XOR EAX,EAX
;_2_73:
;OR EAX,EAX
;JZ short _2_71
_2_76:
MOV EAX,2
PUSH EAX
MOV CL,1
CALL _bump
;ADD ESP,4
POP EAX
_2_77:
MOV EAX,[_ch]
MOV EBX,EAX
MOV EAX,10
CALL __ne
OR EAX,EAX
JZ short _2_78
_2_79:
MOV EAX,[_ch]
OR EAX,EAX
JZ short _2_80
_2_81:
MOV EAX,1
PUSH EAX
MOV CL,1
CALL _bump
;ADD ESP,4
POP EAX
;JMP short _2_82
JMP short _2_77
_2_80:
MOV EAX,[_eof]
OR EAX,EAX
;JZ short _2_83
JZ short _2_77
_2_84:
;JMP _2_78
;_2_83:
;_2_82:
;JMP _2_77
_2_78:
MOV EAX,1
PUSH EAX
MOV CL,1
CALL _bump
;ADD ESP,4
POP EAX
JMP _2_85
_2_71:
MOV EAX,[_ch]		; else if(an(ch)) {
PUSH EAX
MOV CL,1
CALL _an
ADD ESP,4
OR EAX,EAX
JNZ short _2_87		; true
JMP _2_86		; false	
_2_87:
LEA EBX,[EBP-4]
XOR EAX,EAX
MOV [EBX],EAX		; k = 0;
_2_88:
MOV EAX,[_ch]		; while(an(ch) && k < NAMEMAX) {
PUSH EAX
MOV CL,1
CALL _an		; alphanumeric
ADD ESP,4
OR EAX,EAX
;JZ short _2_90
JZ short _2_89		; false
_2_92:
LEA EAX,[EBP-4]
MOV EBX,[EAX]
MOV EAX,8		; NAMEMAX
CALL __lt		; is k < NAMEMAX ?
OR EAX,EAX
;JZ short _2_90
JZ short _2_89		; no, jump to msname[k] = NULL;
_2_93:			; yes, msname[k++] = ch;
;MOV EAX,1
;JMP short _2_91
;JMP short _2_94
;_2_90:
;XOR EAX,EAX
;_2_91:
;OR EAX,EAX
;JZ short _2_89
;_2_94:
LEA EBX,[EBP-4]
MOV EAX,[EBX]		; k
;INC EAX
;MOV [EBX],EAX
;DEC EAX
INC DWORD [EBX]		; k++
MOV EBX,_msname
ADD EBX,EAX		; msname+k
MOV EAX,[_ch]
MOV [EBX],AL		; msname[k++] = ch;
XOR CL,CL
CALL _gch		; gch();
JMP short _2_88		; jump to while(an(ch) &&
_2_89:
LEA EBX,[EBP-4]		; k
MOV EAX,[EBX]
MOV EBX,_msname
PUSH EBX		; msname
ADD EBX,EAX
XOR EAX,EAX		; NULL
MOV [EBX],AL		; msname[k] = NULL;
; if(search(msname, macn, NAMESIZE+2, MACNEND, MACNBR, 0)) {
MOV EAX,[_macn]
PUSH EAX		; macn
MOV EBX,11
PUSH EBX		; NAMESIZE+2
MOV EBX,3300		; MACNSIZE (MACNBR*(NAMESIZE+2))
ADD EAX,EBX
PUSH EAX		; MACNEND (macn+MACNSIZE)
MOV EAX,300		
PUSH EAX		; MACNBR
XOR EAX,EAX
PUSH EAX		; 0
MOV CL,6
CALL _search ; search(msname,macn,NAMESIZE+2,MACNEND,MACNBR,0)
ADD ESP,24
OR EAX,EAX
;JNZ short _2_96
;JMP short _2_95
JZ short _2_95		; else {
_2_96:		; k = getint(cptr+NAMESIZE, 2/*INTSIZE*/);
LEA EAX,[EBP-4]
PUSH EAX
MOV EAX,[_cptr]
MOV EBX,9		; NAMESIZE
ADD EAX,EBX		; cptr+NAMESIZE
PUSH EAX
MOV EAX,2
PUSH EAX		; INTSIZE
MOV CL,2
CALL _getint
ADD ESP,8
POP EBX
MOV [EBX],EAX		; k = getint(..)
_2_97:			; while(c = macq[k++]) keepch(c);
MOV EAX,[_macq]
PUSH EAX
LEA EBX,[EBP-4]		; int k
MOV EAX,[EBX]
INC DWORD [EBX]		; k++
POP EBX
ADD EBX,EAX		; macq[k++]
MOVSX EAX,BYTE [EBX]
LEA EBX,[EBP-8]		; char c
MOV [EBX],AL		; c = macq[k++]
OR EAX,EAX
JZ short _2_98		; c = 0
_2_99:
;LEA EBX,[EBP-8]
;MOVSX EAX,BYTE [EBX]
PUSH EAX
MOV CL,1
CALL _keepch		; keepch(c);
;ADD ESP,4
POP EAX
JMP short _2_97		; jump to while(c
_2_98:
_2_100:			; while(an(ch)) gch();
MOV EAX,[_ch]
PUSH EAX
MOV CL,1
CALL _an		; is alphanumeric ?
ADD ESP,4
OR EAX,EAX
;JNZ short _2_102
;JMP short _2_101
JZ short _2_107		; no, jump to while(ch != NEWLINE
_2_102:			; yes
XOR CL,CL
CALL _gch		; gch();
JMP short _2_100	; jump to while(an(ch))
;_2_101:
;JMP short _2_103
_2_95:			; else {
LEA EBX,[EBP-4]
XOR EAX,EAX
MOV [EBX],EAX		; k = 0;
_2_104:			; while(c = msname[k++]) keepch(c);
PUSH EAX
LEA EBX,[EBP-4]
MOV EAX,[EBX]
INC DWORD [EBX]		; k++
MOV EBX,_msname
ADD EBX,EAX		; msname[k++]
MOVSX EAX,BYTE [EBX]
LEA EBX,[EBP-8]		; c
MOV [EBX],AL		; c = msname[k++]
OR EAX,EAX
;JZ short _2_105
JZ short _2_107		; c = 0
_2_106:	
;LEA EBX,[EBP-8]
;MOVSX EAX,BYTE [EBX]
PUSH EAX
MOV CL,1
CALL _keepch		; keepch(c);
;ADD ESP,4
POP EAX
JMP short _2_104	; jump to while(c
;_2_105:
;_2_103:
;JMP short _2_107
_2_86:			; else keepch(gch());
XOR CL,CL
CALL _gch		; gch()
PUSH EAX
MOV CL,1
CALL _keepch		; keepch(gch());
;ADD ESP,4
POP EAX
_2_107:
_2_85:
_2_70:
_2_51:
_2_35:
_2_19:
JMP _2_7		; jump to while(ch != NEWLINE
_2_8:
MOV EAX,[_pptr]		; if(pptr >= LINEMAX)
MOV EBX,EAX
MOV EAX,127
CALL __ge
OR EAX,EAX
JZ short _2_108
_2_109:			; error("line too long");
MOV EAX,err_ltl		; _2_1+23
PUSH EAX
MOV CL,1
CALL _error
;ADD ESP,4
POP EAX
_2_108:
XOR EAX,EAX 		; NULL
PUSH EAX
MOV CL,1
CALL _keepch		; keepch(NULL);
;ADD ESP,4
POP EAX
MOV EAX,[_pline]
MOV DWORD [_line],EAX 	; line = pline;
XOR EAX,EAX		; 0
PUSH EAX
MOV CL,1
CALL _bump		; bump(0);
ADD ESP,4
MOV ESP,EBP
POP EBP
RETN

_2_1:
err_nq:
 DB "no quote",0
err_na:
 DB "no apostrophe",0
err_ltl:
 DB "line too long",0

