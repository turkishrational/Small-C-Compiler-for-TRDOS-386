_printf:
PUSH EBP
MOV  EBP, ESP
ADD  ESP, -60
CALL _CCARGC		; CCARGC()+
DEC  EAX		; &argc-1;
SHL  EAX, 1
SHL  EAX, 1
LEA  EBX, [EBP+8]	; &argc
ADD  EAX, EBX
LEA  EBX, [EBP-4]	; *nxtarg;
MOV  [EBX], EAX		; *nxtarg=CCARGC()+&argc-1;
;
LEA  EBX, [EBP-20]	; cc
XOR  EAX, EAX		; 0
MOV  [EBX], EAX		; cc=0;
LEA  EBX, [EBP-4]	; *nxtarg
MOV  EAX, [EBX]
PUSH EBX
LEA  EBX, [EBP-36]	; ctl
MOV  [EBX], EAX		; ctl=*nxtarg
POP  EBX
DEC  EAX
DEC  EAX
DEC  EAX
DEC  EAX
MOV  [EBX], EAX		; ctl=*nxtarg--;
_printf_1:		; while(*ctl)
LEA  EBX, [EBP-36]
MOV  EBX, [EBX]
MOVSX EAX, BYTE [EBX]
OR   EAX, EAX
JNZ  short _printf_2	; jump to {if(*ctl!='%')
JMP  short _lib_76	; jump to return (cc);
_printf_2:		; {if(*ctl!='%')
MOV  EBX, EAX
MOV  EAX, 37		;'%'
CALL __ne		; if(*ctl!='%') 
OR   EAX, EAX
;JNZ short _lib_79	; {OS_putc(*ctl++);
;JMP short _printf_3	; else ++ctl;
JZ   short _printf_3
;_lib_79:
LEA  EBX, [EBP-36]	; *ctl++
MOV  EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]	; ctl++
;DEC EAX
MOV  EBX, EAX
MOVSX EAX, BYTE [EBX]	; *ctl
PUSH EAX
MOV  CL, 1
CALL _OS_putc		; OS_putc(*ctl++);
POP  EAX		; add esp, 4
LEA  EBX, [EBP-20]	; ++cc;
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]
JMP  short _printf_1	; continue; (jump to while(*ctl))
_printf_3:		; else ++ctl;
LEA  EBX, [EBP-36]	; *ctl++
MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]
MOVSX EBX, BYTE [EAX]
MOV  EAX, 37		;'%'
CALL __eq		; if(*ctl=='%')
OR   EAX, EAX
;JNZ short _lib_82	; {OS_putc(*ctl++)
;JMP short _printf_4	; else/endif
JZ   short _printf_4	
;_lib_82:
LEA  EBX, [EBP-36]	; ctl++
MOV  EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
;DEC EAX
INC  DWORD [EBX]
MOVSX EBX, BYTE [EAX]
PUSH EBX
MOV  CL, 1
CALL _OS_putc
POP  EAX		; add esp, 4
LEA  EBX, [EBP-20]	; ++cc;
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]
JMP  short _printf_1	; continue;
_printf_4:
LEA  EBX, [EBP-36]	; if(*ctl=='-')
MOV  EAX, [EBX]
MOVSX EBX, BYTE [EAX]
MOV  EAX, 45		; '-'
CALL __eq
OR   EAX, EAX
;JNZ short _lib_84	; if(*ctl=='-')
;JMP short _printf_5	; else
JZ   short _printf_5 
;_lib_84:
LEA  EBX, [EBP-12]	; {left=1;
;MOV EAX, 1
;eax = 1
MOV  [EBX], EAX
LEA  EBX, [EBP-36]
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]	; ++ctl;}
JMP  short _printf_6
_printf_5:		; left=0;
LEA  EBX, [EBP-12]
;XOR EAX, EAX
;eax = 0
MOV  [EBX], EAX
_printf_6:		; if(*ctl=='0') pad='0';
LEA  EBX, [EBP-36]
MOV  EAX, [EBX]
MOVSX EBX, BYTE [EAX]
MOV  EAX, 48		; '0'
CALL __eq		; if(*ctl=='0')
LEA  EBX, [EBP-16]
OR   EAX, EAX
;JNZ short _lib_87	; pad='0';
;JMP short _printf_7	; else pad=' ';
JZ   short _printf_7 
;_lib_87:
;LEA EBX, [EBP-16]	; pointer to pad
MOV  EAX, 48		; '0'
;MOV [EBX], EAX		; pad='0';
JMP  short _printf_8	; if(isdigit(*ctl))
_printf_7:
;LEA  EBX, [EBP-16]
MOV  EAX, 32		; pad=' ';
_printf_8:
MOV  [EBX], EAX
;_printf_8:
LEA  EAX, [EBP-36]	; if(isdigit(*ctl))
MOV  EBX, [EAX]
MOVSX EAX, BYTE [EBX]
PUSH EAX
MOV  CL, 1
CALL _isdigit
;ADD ESP, 4
POP  EBX		; add esp, 4
OR   EAX, EAX
;JNZ short _lib_90	; {width=atoi(ctl++);
;JMP short _printf_10
JZ   short _printf_10 	; width=0;
;_lib_90:		
LEA  EAX, [EBP-32]	; width=atoi(ctl++);
PUSH EAX		; pointer to width
LEA  EBX, [EBP-36]
MOV  EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
;DEC EAX
INC  DWORD [EBX]	; (ctl++);
PUSH EAX
MOV  CL, 1		; argument count
CALL _atoi		; atoi(ctl++);
;ADD ESP, 4
POP  EBX		; add esp, 4	
POP  EBX		; pointer to width
MOV  [EBX], EAX		; width=atoi(ctl++);
_printf_9:
LEA  EAX, [EBP-36]	; while(isdigit(*ctl))
MOV  EBX, [EAX]
MOVSX EAX, BYTE [EBX]
PUSH EAX
MOV  CL, 1
CALL _isdigit
;ADD ESP, 4
POP  EBX
OR   EAX, EAX
;JNZ short _lib_93	; isdigit(*ctl) = true/1
;JMP short _lib_92	; isdigit(*ctl) = false/0
JZ   short _printf_11	; jump to if(*ctl=='.')
;_lib_93:
LEA  EBX, [EBP-36]	; ++ctl;
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]
JMP  short _printf_9	; jump to while(isdigit(*ctl))
;_lib_92:
;JMP  short _printf_11	; jump to if(*ctl=='.')
_printf_10:
LEA  EBX, [EBP-32]	; width=0;
;XOR  EAX, EAX
;eax = 0
MOV  [EBX], EAX
_printf_11:
LEA  EBX, [EBP-36]	; if(*ctl=='.')
MOV  EAX, [EBX]
MOVSX EBX,BYTE [EAX]
MOV  EAX, 46		; '.'
CALL __eq
OR   EAX, EAX
;JNZ short _lib_96	; *ctl=='.' = true/1
;JMP short _lib_95	; *ctl=='.' = false/0
JZ   short _printf_13	; else maxchr=0;
;_lib_96:		; {maxchr=atoi(++ctl);
;LEA EAX, [EBP-28]
;PUSH EAX		; maxchr
LEA  EBX, [EBP-36]
MOV  EAX, [EBX]
INC  EAX
MOV  [EBX], EAX
PUSH EAX
MOV  CL, 1
CALL _atoi
;ADD ESP, 4
POP  EBX 		; add esp, 4
;POP EBX		; maxchr
LEA EBX, [EBP-28]
MOV  [EBX], EAX		; maxchr=atoi(++ctl);
_printf_12:
LEA  EAX, [EBP-36]	; while(isdigit(*ctl))
MOV  EBX, [EAX]
MOVSX EAX, BYTE [EBX]	; (*ctl)
PUSH EAX
MOV  CL, 1
CALL _isdigit		; isdigit(*ctl)
;ADD ESP, 4
POP  EBX		; add esp, 4 
OR   EAX, EAX
;JNZ short _lib_99	; isdigit(*ctl) = true/1
;JMP short _lib_98	; isdigit(*ctl) = false/0
JZ   short _printf_14	; jump to arg=*nxtarg--;
;_lib_99:
LEA  EBX, [EBP-36]
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX		; ++ctl;
INC  DWORD [EBX]
JMP  short _printf_12	; jump to while(isdigit(*ctl))
;_lib_98:
;JMP short _printf_14
_printf_13:		; else maxchr=0;
LEA  EBX, [EBP-28]
;XOR EAX, EAX
;eax = 0
MOV  [EBX], EAX		; maxchr=0;
_printf_14:
;LEA  EAX, [EBP-8]	; arg=*nxtarg--;
;PUSH EAX
LEA  EBX, [EBP-4]
MOV  EAX, [EBX]		; *nxtarg
PUSH EAX
DEC  EAX
DEC  EAX
DEC  EAX
DEC  EAX
MOV  [EBX], EAX		; *nxtarg--
POP  EBX
MOV  EAX, [EBX]
;POP EBX
LEA  EBX, [EBP-8]	; pointer to arg
MOV  [EBX], EAX		; arg=*nxtarg--;
;LEA EAX, [EBP-40]	; *sptr
;PUSH EAX		
LEA  EAX, [EBP-60]	; pointer to str[17];
;POP EBX
LEA  EBX, [EBP-40]	; *sptr	
MOV  [EBX], EAX		; sptr=str;
LEA  EAX, [EBP-36]	; switch(*ctl++)
MOV  EBX, [EAX]
INC  DWORD [EAX]	; *ctl++
MOVSX EAX, BYTE [EBX]	; char = (*ctl++)
JMP  _printf_23		; jump to switch
;
_printf_15:		; case 'c': str[0]=arg; str[1]=NULL;
LEA  EBX, [EBP-8]	; pointer to arg
MOV  EAX, [EBX]		; arg
LEA  EBX, [EBP-60]	; pointer to str ; str[0]
MOV  [EBX], AL		; str[0]=arg
INC  EBX		; str[1]	
XOR  EAX, EAX		; NULL
MOV  [EBX], AL		; str[1]=NULL;
JMP  _printf_24		; break;
_printf_16:		; case 's': sptr=arg;
LEA  EBX, [EBP-8]	; pointer to arg
MOV  EAX, [EBX]		; arg
LEA  EBX, [EBP-40]	; pointer to sptr
MOV  [EBX], EAX		; sptr=arg;
JMP  _printf_24		; break;
_printf_17:		; case 'd': itoa(arg,str);
LEA  EBX, [EBP-8]
MOV  EAX, [EBX]		; arg
PUSH EAX
LEA  EAX, [EBP-60]
PUSH EAX
MOV  CL, 2		; 2 arguments
CALL _itoa		; itoa(arg,str);
;ADD ESP, 8
POP  EAX
POP  EAX
JMP  _printf_24		; break;
_printf_18:		; case 'b': itoab(arg,str,2);
LEA  EBX, [EBP-8]
MOV  EAX, [EBX]		; arg
PUSH EAX
LEA  EAX, [EBP-60]
PUSH EAX		; str (address)
MOV  EAX, 2		; 2 ; binary
PUSH EAX
MOV  CL, 3		; 3 arguments
CALL _itoab		; itoab(arg,str,2);
ADD  ESP, 12
JMP  _printf_24		; break;
_printf_19:		; case 'o': itoab(arg,str,8);
LEA  EBX, [EBP-8]
MOV  EAX, [EBX]
PUSH EAX		; arg
LEA  EAX, [EBP-60]
PUSH EAX		; str
MOV  EAX, 8		; 8 ; octal
PUSH EAX
MOV  CL, 3
CALL _itoab		; itoab(arg,str,8);
ADD  ESP, 12
JMP  _printf_24		; break;
_printf_20:		; case 'u': itoab(arg,str,10);
LEA  EBX, [EBP-8]
MOV  EAX, [EBX]
PUSH EAX		; arg
LEA  EAX, [EBP-60]
PUSH EAX		; str
MOV  EAX, 10		; 10 ; decimal
PUSH EAX
MOV  CL,3
CALL _itoab		; itoab(arg,str,10);
ADD  ESP, 12
JMP  short _printf_24	; break;
_printf_21:		; case 'x': itoab(arg,str,16);
LEA  EBX, [EBP-8]
MOV  EAX, [EBX]
PUSH EAX		; arg
LEA  EAX, [EBP-60]
PUSH EAX		; str
MOV  EAX, 16		; 16 ; hexadecimal
PUSH EAX
MOV  CL,3
CALL _itoab		; itoab(arg,str,16);
ADD  ESP, 12
JMP  short _printf_24	; break;
;
_printf_22:		; return (cc);
;_lib_76:		; return (cc);
LEA  EBX, [EBP-20]
MOV  EAX, [EBX]		; cc
MOV  ESP, EBP
POP  EBP
RETN
;
_printf_23:		; switch(*ctl++)
CALL __switch
 DD  _printf_15		; case 'c'
 DD  99			; 'c'
 DD  _printf_16		; case 's'
 DD  115		; 's'
 DD  _printf_17		; case 'd'
 DD  100		; 'd'
 DD  _printf_18		; case 'b'
 DD  98			; 'b'
 DD  _printf_19		; case 'o'
 DD  111		; 'o'
 DD  _printf_20		; case 'u'
 DD  117		; 'u'
 DD  _printf_21		; case 'x'
 DD  120		; 'x'
 DD  0			; case default
JMP  short _printf_22	; default: return (cc);
;
_printf_24:		; len=strlen(sptr);
;LEA  EAX, [EBP-24]
;PUSH EAX
LEA  EBX, [EBP-40]
MOV  EAX, [EBX]
PUSH EAX
MOV  CL, 1
CALL _strlen		; strlen(sptr);
;ADD ESP, 4
POP  EBX		; add esp, 4
;POP EBX
LEA  EBX, [EBP-24]	; pointer to len
MOV  [EBX], EAX		; len=strlen(sptr);
LEA  EBX, [EBP-28]	; pointer to maxchr
MOV  EAX, [EBX]
OR   EAX, EAX
;JNZ short _lib_115	; if(maxchr &&
;JMP short _lib_113	; else/endif
JZ   short _printf_25
;_lib_115:
;LEA EAX, [EBP-28]	; if(maxchr && maxchr<len)
;MOV EBX, EAX
;MOV EAX, [EBX]
PUSH EAX
LEA  EBX, [EBP-24]	; pointer to len
MOV  EAX, [EBX]		; len
POP  EBX		; maxchr
CALL __lt		; if (maxchr<len) ; if (eax > ebx)
OR   EAX, EAX
;JNZ short _lib_116	; true/1, then len=maxchr;
;JMP short _lib_113
JZ  short _printf_25	; false/0, endif
;_lib_116:
;MOV EAX, 1
;eax = 1
;JMP  short _lib_114
;_lib_113:
;XOR  EAX, EAX
;_lib_114:
;OR  EAX, EAX
;JNZ short _lib_117
;JMP short _printf_25
;_lib_117:		; len=maxchr;
;LEA EAX, [EBP-24]
;PUSH EAX
LEA  EBX, [EBP-28]	; pointer to maxchr
MOV  EAX, [EBX]
;POP EBX
LEA  EBX, [EBP-24]	; pointer to len
MOV  [EBX], EAX		; len=maxchr;
_printf_25:		; if(width>len)
LEA  EBX, [EBP-32]
MOV  EAX, [EBX]		; width
PUSH EAX
LEA  EBX, [EBP-24]
MOV  EAX, [EBX]		; len
POP  EBX		; width	
CALL __gt		; if (width>len) ; if (eax < ebx)
LEA  EBX, [EBP-32]	; width (address)
OR   EAX, EAX
;JNZ short _lib_119	; width=width-len;
;JMP short _printf_26	; else width=0;
JZ   short _printf_26
;_lib_119:
;LEA EBX, [EBP-32]	; width=width-len
PUSH EBX		; pointer to width (width address)
MOV  EAX, [EBX]		; width (value)
PUSH EAX
LEA  EAX, [EBP-24]	; pointer to len (len address)
MOV  EBX, [EAX]		; len value
POP  EAX		; width value
SUB  EAX, EBX		; width-len
POP  EBX
MOV  [EBX], EAX ; *	; width=width-len
;JMP short _lib_120 ; *	; jump to if(!left)
_printf_26:		; else width=0;
;LEA EBX, [EBP-32]
;XOR EAX, EAX
; eax = 0
MOV  [EBX], EAX	; *	; width=0;
;_lib_120:
LEA  EBX, [EBP-12]	; if(!left)
MOV  EAX, [EBX]
CALL __lneg		; (!left) ; if left = 0
OR   EAX, EAX
;JNZ short _lib_122	; true/1
;JMP short _printf_28	; false/0
JZ   short _printf_28	; else/endif
;_lib_122:
_printf_27:		; while(width--)
LEA  EBX, [EBP-32]
MOV  EAX, [EBX]
DEC  DWORD [EBX]
OR   EAX, EAX
;JNZ short _lib_125	; {OS_putc(pad);
;JMP short _lib_124	; jump to while(len--)
JZ   short _printf_28
;_lib_125:
LEA  EBX, [EBP-16]
MOV  EAX, [EBX]		; pad
PUSH EAX
MOV  CL, 1
CALL _OS_putc
;ADD ESP, 4
POP  EAX		; add esp, 4
LEA  EBX, [EBP-20]	; ++cc;}
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]	; ++cc
JMP  short _printf_27	; jump to while(width--)
;_lib_124:
_printf_28:		; while(len--)
;_lib_126:
LEA  EBX, [EBP-24]
MOV  EAX, [EBX]		; len
;DEC EAX
;MOV [EBX], EAX
;INC EAX
DEC  DWORD [EBX]	; (len--)
OR   EAX, EAX
;JNZ short _lib_128	; {OS_putc(*sptr++);
;JMP short _printf_29	; if(left)
JZ   short _printf_29
;_lib_128:
LEA  EAX, [EBP-40]	; (*sptr++)
MOV  EBX, [EAX]
INC  DWORD [EAX]
MOVSX EAX, BYTE [EBX]
PUSH EAX
MOV  CL, 1		; 1 argument
CALL _OS_putc		; OS_putc(*sptr++);
;ADD ESP, 4
POP  EAX		; add esp, 4
LEA  EBX, [EBP-20]
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]	; ++cc;}
;JMP short _lib_126
JMP  short _printf_28	; jump to while(len--)
_printf_29:
LEA  EBX, [EBP-12]	; if(left)
MOV  EAX, [EBX]
OR   EAX, EAX
;JNZ short _lib_130	; true/1, while(width--)
;JMP short _printf_31	; false/0, jump to while(*ctl)
jz   short _printf_31
;_lib_130:
_printf_30:		; while(width--)
LEA  EBX, [EBP-28]
MOV  EAX, [EBX]
DEC  DWORD [EBX]	; (width--)
OR   EAX, EAX
JNZ  short _printf_32
;JMP short _lib_132
;_lib132:
_printf_31:
JMP  _printf_1		; jump to while(*ctl)
_printf_32:
LEA  EBX, [EBP-16]	; {OS_putc(pad);
MOV  EAX, [EBX]
PUSH EAX		; pad (value/char)
MOV  CL, 1
CALL _OS_putc		; OS_putc(pad);
;ADD ESP, 4
POP  EAX		; add esp, 4
LEA  EBX, [EBP-20]	; ++cc;}
;MOV EAX, [EBX]
;INC EAX
;MOV [EBX], EAX
INC  DWORD [EBX]
JMP  short _printf_30	; jump to while(width--)

;_lib_76:		; return (cc);
;LEA EBX, [EBP-20]	; cc
;MOV EAX, [EBX]
;MOV ESP, EBP
;POP EBP
;RETN

_fputs:			; fputs(string,fd)
PUSH EBP
MOV  EBP, ESP
_fputs_1:
LEA  EAX, [EBP+12]	; while(*string)
MOV  EBX, [EAX]
MOVSX EAX, BYTE [EBX]	; *string (char)
OR   EAX, EAX
JZ   short _fputs_2	; char = 0 (ASCIIZ string)
;_lib_137:
PUSH EAX
LEA  EAX, [EBP+12]	; OS_fputc(*string++,fd);
;MOV EBX, [EAX]
;INC EBX
;MOV [EAX], EBX
;DEC EBX
INC  DWORD [EAX]	; *string++
			; (points to the next char)
;MOVSX EAX, BYTE [EBX]	; char (> 0)
;PUSH EAX
LEA  EBX, [EBP+8]
MOV  EAX, [EBX]		; fd (-1 -> STDOUT/STDERR)
PUSH EAX
MOV  CL, 2
CALL _OS_fputc
ADD  ESP, 8
JMP  short _fputs_1	; jump to while(*string)
_fputs_2:
POP  EBP
RETN

